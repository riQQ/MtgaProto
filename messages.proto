syntax = "proto3";
package wotc.mtgo.gre.external.messaging;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor


message AIConfig {
	MatchConfig matchConfig = 1;
	SettingsMessage defaultSettings = 2;
	repeated DeckConfig deckConfigs = 3;
}

message Action {
	ActionType actionType = 1;
	uint32 grpId = 2;
	uint32 instanceId = 3;
	uint32 facetId = 4;
	uint32 abilityGrpId = 6;
	uint32 sourceId = 8;
	uint32 alternativeGrpId = 9;
	repeated ManaPaymentOption manaPaymentOptions = 10;
	repeated ManaRequirement manaCost = 11;
	bool shouldStop = 12;
	uint32 disqualifyingSourceId = 13;
	uint32 selectionType = 14;
	uint32 selection = 15;
	uint32 alternativeSourceZcid = 17;
	Visibility visibility = 18;
	repeated TargetSelection targets = 19;
	repeated ManaPaymentCondition manaPaymentConditions = 20;
	AutoTapSolution autoTapSolution = 21;
	uint32 maxActivations = 24;
	bool isBatchable = 25;
	ManaRequirement twobridGenericManaCost = 26;
	HighlightType highlight = 27;
	repeated Cost costs = 28;
	uint32 timingSourceGrpid = 30;
	uint32 uniqueAbilityId = 31;
	repeated uint32 consumableCostAdjustmentQualificationIds = 32;
	bool isManaAbilityWithSideEffect = 33;
}

message ActionInfo {
	uint32 actionId = 1;
	uint32 seatId = 2;
	Action action = 3;
}

enum ActionType {
	ActionType_None = 0;
	ActionType_Cast = 1;
	ActionType_Activate = 2;
	ActionType_Play = 3;
	ActionType_Activate_Mana = 4;
	ActionType_Pass = 5;
	ActionType_Activate_Test = 6;
	ActionType_Special = 7;
	ActionType_Special_TurnFaceUp = 8;
	ActionType_ResolutionCost = 9;
	ActionType_CastLeft = 10;
	ActionType_CastRight = 11;
	ActionType_Make_Payment = 12;
	ActionType_CombatCost = 14;
	ActionType_OpeningHandAction = 15;
	ActionType_CastAdventure = 16;
	ActionType_FloatMana = 17;
	ActionType_CastMDFC = 18;
	ActionType_PlayMDFC = 19;
	ActionType_Special_Payment = 20;
	ActionType_CastPrototype = 21;
	ActionType_Placeholder22 = 22;
	ActionType_Placeholder23 = 23;
	ActionType_Placeholder24 = 24;
}

message ActionsAvailableReq {
	repeated Action actions = 1;
	repeated Action inactiveActions = 2;
}

enum AllowCancel {
	AllowCancel_None = 0;
	AllowCancel_Continue = 1;
	AllowCancel_Abort = 2;
	AllowCancel_No = 3;
}

enum AllowFailToFind {
	AllowFailToFind_None = 0;
	AllowFailToFind_Any = 1;
	AllowFailToFind_Zero = 2;
}

message AndCost {
	repeated Cost costs = 1;
}

message AnnotationInfo {
	uint32 id = 1;
	uint32 affectorId = 2;
	repeated uint32 affectedIds = 3;
	repeated AnnotationType type = 4;
	repeated KeyValuePairInfo details = 6;
	bool redactAffector = 7;
	repeated uint32 ignoreForSeatIds = 8;
	bool redactAffected = 9;
}

enum AnnotationType {
	AnnotationType_None = 0;
	AnnotationType_ZoneTransfer = 1;
	AnnotationType_LossOfGame = 2;
	AnnotationType_DamageDealt = 3;
	AnnotationType_TappedUntappedPermanent = 4;
	AnnotationType_ModifiedPower = 5;
	AnnotationType_ModifiedToughness = 6;
	AnnotationType_ModifiedColor = 7;
	AnnotationType_PhaseOrStepModified = 8;
	AnnotationType_AddAbility = 9;
	AnnotationType_ModifiedLife = 10;
	AnnotationType_CreateAttachment = 11;
	AnnotationType_RemoveAttachment = 12;
	AnnotationType_ObjectIdChanged = 13;
	AnnotationType_Counter = 14;
	AnnotationType_ControllerChanged = 15;
	AnnotationType_CounterAdded = 16;
	AnnotationType_CounterRemoved = 17;
	AnnotationType_LayeredEffectCreated = 18;
	AnnotationType_LayeredEffectDestroyed = 19;
	AnnotationType_Attachment = 20;
	AnnotationType_Haunt = 21;
	AnnotationType_CopiedObject = 22;
	AnnotationType_RemoveAbility = 23;
	AnnotationType_WinTheGame = 24;
	AnnotationType_ModifiedType = 25;
	AnnotationType_TargetSpec = 26;
	AnnotationType_TextChange = 27;
	AnnotationType_FaceDown = 28;
	AnnotationType_TurnPermanent = 29;
	AnnotationType_DynamicAbility = 30;
	AnnotationType_ObjectsSelected = 31;
	AnnotationType_TriggeringObject = 32;
	AnnotationType_DamageSource = 33;
	AnnotationType_ManaPaid = 34;
	AnnotationType_TokenCreated = 35;
	AnnotationType_AbilityInstanceCreated = 36;
	AnnotationType_AbilityInstanceDeleted = 37;
	AnnotationType_DisplayCardUnderCard = 38;
	AnnotationType_AbilityWordActive = 39;
	AnnotationType_LinkInfo = 40;
	AnnotationType_TokenDeleted = 41;
	AnnotationType_Qualification = 42;
	AnnotationType_ResolutionStart = 43;
	AnnotationType_ResolutionComplete = 44;
	AnnotationType_Designation = 45;
	AnnotationType_GainDesignation = 46;
	AnnotationType_CardRevealed = 47;
	AnnotationType_NewTurnStarted = 48;
	AnnotationType_ManaDetails = 49;
	AnnotationType_DisqualifiedEffect = 50;
	AnnotationType_LayeredEffect = 51;
	AnnotationType_MiscContinuousEffect = 52;
	AnnotationType_ShouldntPlay = 53;
	AnnotationType_UseOrCostsManaCost = 54;
	AnnotationType_RemainingSelections = 55;
	AnnotationType_Shuffle = 56;
	AnnotationType_CoinFlip = 57;
	AnnotationType_ChoiceResult = 58;
	AnnotationType_RevealedCardCreated = 59;
	AnnotationType_RevealedCardDeleted = 60;
	AnnotationType_SuspendLike = 61;
	AnnotationType_ReplacementEffect = 62;
	AnnotationType_EnteredZoneThisTurn = 63;
	AnnotationType_CastingTimeOption = 64;
	AnnotationType_Scry = 65;
	AnnotationType_PredictedDirectDamage = 66;
	AnnotationType_SwitchPowerToughness = 67;
	AnnotationType_SupplementalText = 68;
	AnnotationType_PendingEffect = 69;
	AnnotationType_AttachmentCreated = 70;
	AnnotationType_PowerToughnessModCreated = 71;
	AnnotationType_SyntheticEvent = 72;
	AnnotationType_UserActionTaken = 73;
	AnnotationType_DelayedTriggerAffectees = 74;
	AnnotationType_InstanceRevealedToOpponent = 75;
	AnnotationType_ModifiedName = 76;
	AnnotationType_ReplacementEffectApplied = 77;
	AnnotationType_ReferencedObjects = 78;
	AnnotationType_ChoosingAttachments = 79;
	AnnotationType_TemporaryPermanent = 80;
	AnnotationType_GamewideHistoryCount = 81;
	AnnotationType_AbilityExhausted = 82;
	AnnotationType_MultistepEffectStarted = 83;
	AnnotationType_MultistepEffectComplete = 84;
	AnnotationType_DieRoll = 85;
	AnnotationType_DungeonStatus = 86;
	AnnotationType_LinkedDamage = 87;
	AnnotationType_ClassLevel = 88;
	AnnotationType_TokenImmediatelyDied = 89;
	AnnotationType_DamagedThisTurn = 90;
	AnnotationType_ReferencedCardNames = 91;
	AnnotationType_PlayerSelectingTargets = 92;
	AnnotationType_PlayerSubmittedTargets = 93;
	AnnotationType_CrewedThisTurn = 94;
	AnnotationType_PhasedOut = 95;
	AnnotationType_PhasedIn = 96;
	AnnotationType_LoyaltyActivationsRemaining = 97;
	AnnotationType_GroupedIds = 98;
	AnnotationType_RegeneratePending = 99;
	AnnotationType_PermanentRegenerated = 100;
	AnnotationType_ObjectsToDistinguish = 101;
}

enum Answer {
	Answer_None = 0;
	Answer_Yes = 1;
	Answer_No = 2;
}

message AnyMessage {
	int64 timestamp = 1;
	oneof message {
		ServerToGREMessage serverToGREMessage = 2;
		GREToServerMessage gREToServerMessage = 3;
		ClientToGREMessage clientToGREMessage = 4;
		GREToClientMessage gREToClientMessage = 5;
	}
}

message AnyToGREMessage {
	int64 timestamp = 1;
	oneof message {
		ServerToGREMessage serverToGREMessage = 2;
		ClientToGREMessage clientToGREMessage = 3;
	}
}

message AssignDamageConfirmation {
	ResultCode result = 1;
}

message AssignDamageReq {
	repeated DamageAssigner damageAssigners = 1;
}

message AssignDamageResp {
	repeated DamageAssigner assigners = 1;
}

message AttackInfo {
	uint32 targetId = 1;
	bool damageOrdered = 2;
	bool damageAssigned = 3;
	repeated OrderedDamageAssignment orderedBlockers = 4;
	uint32 alternativeGrpId = 5;
}

enum AttackState {
	AttackState_None = 0;
	AttackState_Declared = 1;
	AttackState_Attacking = 2;
}

message AttackWarning {
	uint32 instanceId = 1;
	AttackWarningType type = 2;
	uint32 warningPromptId = 3;
}

enum AttackWarningType {
	AttackWarningType_None = 0;
	AttackWarningType_MustAttackWithAtLeastOne = 1;
	AttackWarningType_CannotAttackAlone = 2;
	AttackWarningType_MustAttack = 3;
	AttackWarningType_UnpayableEffectCost = 4;
	AttackWarningType_CannotBeAttackedByMoreThanOne = 5;
}

message Attacker {
	uint32 attackerInstanceId = 1;
	repeated DamageRecipient legalDamageRecipients = 2;
	DamageRecipient selectedDamageRecipient = 3;
	uint32 alternativeGrpId = 4;
	bool mustAttack = 6;
}

message AuthenticateRequest {
	string clientId = 1;
	bytes clientAuthToken = 2;
	string playerName = 3;
	string playFabSessionTicket = 4;
	int32 inactivityTimeoutMs = 5;
	ClientInfo clientInfo = 10;
}

message AuthenticateResponse {
	string clientId = 1;
	string sessionId = 2;
	int32 inactivityTimeoutMs = 3;
	string screenName = 10;
}

message AutoAnswer {
	uint32 promptGrpId = 1;
	uint32 abilityGrpId = 2;
	uint32 cardTitleId = 3;
	SettingScope appliesTo = 4;
	SettingStatus status = 5;
	Answer answer = 6;
}

enum AutoPassOption {
	AutoPassOption_None = 0;
	AutoPassOption_Turn = 1;
	AutoPassOption_UnlessAction = 2;
	AutoPassOption_EndStep = 3;
	AutoPassOption_Clear = 4;
	AutoPassOption_UnlessOpponentAction = 5;
	AutoPassOption_ResolveMyStackEffects = 6;
	AutoPassOption_FullControl = 7;
	AutoPassOption_ResolveAll = 9;
}

enum AutoPassPriority {
	AutoPassPriority_None = 0;
	AutoPassPriority_No = 1;
	AutoPassPriority_Yes = 2;
}

message AutoRespondPermission {
	repeated uint32 seatIds = 1;
}

message AutoTapAction {
	uint32 instanceId = 1;
	uint32 abilityGrpId = 2;
	uint32 manaId = 3;
	ManaPaymentOption manaPaymentOption = 4;
}

message AutoTapActionsAvailableReq {
	repeated AutoTapSolution autoTapSolutions = 2;
}

message AutoTapManaPayment {
	ManaColor manaColor = 1;
	uint32 manaSpecTypeBits = 2;
}

message AutoTapSolution {
	repeated AutoTapAction autoTapActions = 1;
	repeated ManaPaymentCondition manaPaymentConditions = 2;
	repeated ManaColor selectedManaColors = 3;
	repeated AutoTapManaPayment manaPayments = 4;
}

enum AutoTapStopsSetting {
	AutoTapStopsSetting_None = 0;
	AutoTapStopsSetting_Enable = 1;
	AutoTapStopsSetting_Disable = 2;
}

message AutoYield {
	uint32 abilityGrpId = 1;
	uint32 cardTitleId = 2;
	SettingScope appliesTo = 3;
	SettingStatus status = 4;
}

message BinaryGameState {
	GameStateMessage gameStateMsg = 1;
	bytes instanceData = 2;
	bytes internalGREData = 4;
}

message BlockInfo {
	repeated uint32 attackerIds = 1;
	bool damageOrdered = 2;
	bool damageAssigned = 3;
	repeated OrderedDamageAssignment orderedAttackers = 4;
}

enum BlockState {
	BlockState_None = 0;
	BlockState_Declared = 1;
	BlockState_Blocking = 2;
	BlockState_Blocked = 3;
	BlockState_Unblocked = 4;
}

message BlockWarning {
	uint32 instanceId = 1;
	BlockWarningType type = 2;
	uint32 warningPromptId = 3;
}

enum BlockWarningType {
	BlockWarningType_None = 0;
	BlockWarningType_InsufficientBlockers = 1;
	BlockWarningType_CannotBlockAlone = 2;
	BlockWarningType_MustBeBlocked = 3;
	BlockWarningType_MustBlock = 4;
	BlockWarningType_MustBeBlockedByAll = 5;
}

message Blocker {
	uint32 blockerInstanceId = 1;
	repeated uint32 attackerInstanceIds = 2;
	repeated uint32 selectedAttackerInstanceIds = 3;
	uint32 minAttackers = 4;
	uint32 maxAttackers = 5;
	bool mustBlock = 6;
}

message BoolValue {
	bool value = 1;
}

message BoolValues {
	repeated bool values = 1;
}

message CLIPSConfiguration {
	bool enableWatch = 1;
	bool enableMetrics = 2;
	bool enableLogging = 3;
	string initFile = 4;
	int32 maxFiringLimit = 5;
	int32 warningFiringLimit = 6;
	string metricsFile = 7;
	string logFile = 8;
	bool metricsFileAppend = 9;
	bool logFileAppend = 10;
}

message CancelActionReq {
}

enum CardColor {
	CardColor_Colorless = 0;
	CardColor_White = 1;
	CardColor_Blue = 2;
	CardColor_Black = 3;
	CardColor_Red = 4;
	CardColor_Green = 5;
	CardColor_Land = 6;
	CardColor_Artifact = 7;
}

message CardConfig {
	uint32 count = 1;
	string title = 2;
	string expansionCode = 3;
	string rarity = 4;
}

enum CardMechanicType {
	CardMechanicType_None = 0;
	CardMechanicType_AddAbility = 2;
	CardMechanicType_AddAttachment = 3;
	CardMechanicType_DealDamage = 4;
	CardMechanicType_DestroyPermanent = 5;
	CardMechanicType_Discard = 6;
	CardMechanicType_DrawCard = 7;
	CardMechanicType_LossOfGame = 8;
	CardMechanicType_SetColor = 9;
	CardMechanicType_PayLife = 10;
	CardMechanicType_ModifyPower = 11;
	CardMechanicType_ModifyToughness = 12;
	CardMechanicType_PhaseOrStepTransition = 13;
	CardMechanicType_PutCounterOnObject = 14;
	CardMechanicType_CreateToken = 15;
	CardMechanicType_RemoveCounterFromObject = 16;
	CardMechanicType_ResolveAbility = 17;
	CardMechanicType_Reveal = 18;
	CardMechanicType_TapPermanent = 19;
	CardMechanicType_UntapPermanent = 21;
	CardMechanicType_ZoneTransfer = 22;
	CardMechanicType_RegeneratePermanent = 23;
	CardMechanicType_SacrificePermanent = 24;
	CardMechanicType_SetController = 25;
	CardMechanicType_DeclaredAttacker = 26;
	CardMechanicType_DeclaredBlocker = 27;
	CardMechanicType_BecomeTarget = 28;
	CardMechanicType_AddToManaPool = 29;
	CardMechanicType_EnterZone = 30;
	CardMechanicType_ShuffleLibrary = 31;
	CardMechanicType_CounterObjectOnStack = 32;
	CardMechanicType_ExileGameObject = 33;
	CardMechanicType_DamageDealt = 34;
	CardMechanicType_PhaseInPermanent = 35;
	CardMechanicType_PhaseOutPermanent = 36;
	CardMechanicType_AttackerBlocked = 37;
	CardMechanicType_AttackersSubmitted = 38;
	CardMechanicType_BlockersDetermined = 39;
	CardMechanicType_SetPower = 40;
	CardMechanicType_SetToughness = 41;
	CardMechanicType_BeginTurn = 42;
	CardMechanicType_TurnFaceUp = 43;
	CardMechanicType_Transform = 44;
	CardMechanicType_Dredge = 45;
	CardMechanicType_Explore = 46;
	CardMechanicType_Provoke = 47;
	CardMechanicType_Riot = 48;
	CardMechanicType_Mutate = 49;
	CardMechanicType_GraveyardExile = 50;
	CardMechanicType_Exert = 51;
	CardMechanicType_PutTopOrBottom = 52;
	CardMechanicType_Placeholder53 = 53;
	CardMechanicType_Placeholder54 = 54;
	CardMechanicType_Placeholder55 = 55;
	CardMechanicType_Placeholder56 = 56;
}

message CardSkinTuple {
	uint32 catalogId = 1;
	string skinCode = 2;
}

enum CardType {
	CardType_None = 0;
	CardType_Artifact = 1;
	CardType_Creature = 2;
	CardType_Enchantment = 3;
	CardType_Instant = 4;
	CardType_Land = 5;
	CardType_Phenomenon = 6;
	CardType_Plane = 7;
	CardType_Planeswalker = 8;
	CardType_Scheme = 9;
	CardType_Sorcery = 10;
	CardType_Tribal = 11;
	CardType_Vanguard = 12;
	CardType_Dungeon = 13;
	CardType_Battle = 14;
}

message CastingTimeOptionReq {
	uint32 ctoId = 1;
	CastingTimeOptionType castingTimeOptionType = 2;
	uint32 affectedId = 3;
	uint32 affectorId = 4;
	uint32 grpId = 5;
	uint32 playerIdToPrompt = 6;
	bool isRequired = 7;
	Prompt prompt = 8;
	oneof message {
		NumericInputReq numericInputReq = 9;
		SelectManaTypeReq selectManaTypeReq = 10;
		ModalReq modalReq = 11;
		SelectNReq selectNReq = 12;
	}
	repeated ManaRequirement manaCost = 13;
	AutoTapSolution autoTapSolution = 15;
}

message CastingTimeOptionResp {
	uint32 ctoId = 1;
	CastingTimeOptionType castingTimeOptionType = 2;
	oneof message {
		NumericInputResp numericInputResp = 3;
		SelectManaTypeResp selectManaTypeResp = 4;
		ChooseModalResp chooseModalResp = 5;
		SelectNResp selectNResp = 6;
	}
}

enum CastingTimeOptionType {
	CastingTimeOptionType_None = 0;
	CastingTimeOptionType_Done = 1;
	CastingTimeOptionType_ChooseX = 2;
	CastingTimeOptionType_Kicker = 3;
	CastingTimeOptionType_Multikicker = 4;
	CastingTimeOptionType_AdditionalCost = 5;
	CastingTimeOptionType_OptionalCost = 6;
	CastingTimeOptionType_Replicate = 7;
	CastingTimeOptionType_Conspire = 8;
	CastingTimeOptionType_ManaType = 9;
	CastingTimeOptionType_Modal = 10;
	CastingTimeOptionType_ChooseOrCost = 11;
	CastingTimeOptionType_Selection = 12;
	CastingTimeOptionType_CastThroughAbility = 13;
	CastingTimeOptionType_TimingPermission = 14;
	CastingTimeOptionType_Casualty = 15;
	CastingTimeOptionType_Specialize = 16;
}

message CastingTimeOptionsReq {
	repeated CastingTimeOptionReq castingTimeOptionReq = 1;
}

message CastingTimeOptionsResp {
	CastingTimeOptionResp castingTimeOptionResp = 1;
	repeated CastingTimeOptionResp castingTimeOptionResps = 2;
}

message CheckpointConfiguration {
	bool enabled = 1;
}

enum ChoicePersistence {
	ChoicePersistence_None = 0;
	ChoicePersistence_ChooseOnce = 1;
	ChoicePersistence_ChooseAlways = 2;
}

message ChooseModalResp {
	repeated uint32 grpIds = 2;
}

message ChooseStartingPlayerReq {
	TeamType teamType = 1;
	repeated uint32 systemSeatIds = 2;
	repeated uint32 teamIds = 3;
	Prompt prompt = 4;
}

message ChooseStartingPlayerResp {
	TeamType teamType = 1;
	uint32 systemSeatId = 2;
	uint32 teamId = 3;
}

message ClientInfo {
	string clientId = 1;
	ClientType clientType = 2;
	string clientVersion = 10;
	string clientLocation = 11;
	string clientLanguage = 12;
}

enum ClientMessageType {
	ClientMessageType_None = 0;
	ClientMessageType_ConnectReq = 1;
	ClientMessageType_CancelActionReq = 5;
	ClientMessageType_ConcedeReq = 7;
	ClientMessageType_EnterSideboardingReq = 8;
	ClientMessageType_ForceDrawReq = 9;
	ClientMessageType_GetSettingsReq = 11;
	ClientMessageType_GroupResp = 12;
	ClientMessageType_MulliganResp = 13;
	ClientMessageType_OrderResp = 14;
	ClientMessageType_PerformActionResp = 15;
	ClientMessageType_ControlReq = 17;
	ClientMessageType_SelectNResp = 18;
	ClientMessageType_SetSettingsReq = 20;
	ClientMessageType_UndoReq = 22;
	ClientMessageType_ChooseStartingPlayerResp = 24;
	ClientMessageType_OptionalActionResp = 25;
	ClientMessageType_AllowForceDrawResp = 26;
	ClientMessageType_RevealHandResp = 28;
	ClientMessageType_DeclareAttackersResp = 30;
	ClientMessageType_SubmitAttackersReq = 31;
	ClientMessageType_DeclareBlockersResp = 32;
	ClientMessageType_SubmitBlockersReq = 33;
	ClientMessageType_OrderCombatDamageResp = 34;
	ClientMessageType_AssignDamageResp = 35;
	ClientMessageType_SelectTargetsResp = 36;
	ClientMessageType_SubmitTargetsReq = 37;
	ClientMessageType_DrawCardResp = 38;
	ClientMessageType_SelectReplacementResp = 39;
	ClientMessageType_SelectNGroupResp = 40;
	ClientMessageType_DistributionResp = 42;
	ClientMessageType_NumericInputResp = 43;
	ClientMessageType_SearchResp = 44;
	ClientMessageType_EffectCostResp = 45;
	ClientMessageType_CastingTimeOptionsResp = 46;
	ClientMessageType_SelectFromGroupsResp = 48;
	ClientMessageType_SearchFromGroupsResp = 49;
	ClientMessageType_GatherResp = 50;
	ClientMessageType_AutoResp = 52;
	ClientMessageType_UIMessage = 53;
	ClientMessageType_SubmitDeckResp = 54;
	ClientMessageType_TakeTimeoutReq = 55;
	ClientMessageType_PerformAutoTapActionsResp = 56;
	ClientMessageType_StringInputResp = 57;
	ClientMessageType_SelectCountersResp = 58;
}

message ClientSessionInfo {
	string clientId = 1;
	string sessionId = 2;
	repeated string roles = 3;
	string userName = 4;
	string screenName = 5;
	ClientInfo clientInfo = 10;
}

message ClientToGREMessage {
	ClientMessageType type = 1;
	uint32 systemSeatId = 2;
	uint32 gameStateId = 3;
	uint32 respId = 4;
	oneof message {
		ConnectReq connectReq = 5;
		CancelActionReq cancelActionReq = 6;
		ConcedeReq concedeReq = 8;
		ForceDrawReq forceDrawReq = 9;
		GroupResp groupResp = 10;
		MulliganResp mulliganResp = 11;
		OptionalResp optionalResp = 12;
		OrderResp orderResp = 13;
		PerformActionResp performActionResp = 14;
		SelectNResp selectNResp = 15;
		SetSettingsReq setSettingsReq = 16;
		ChooseStartingPlayerResp chooseStartingPlayerResp = 21;
		DeclareAttackersResp declareAttackersResp = 22;
		DeclareBlockersResp declareBlockersResp = 23;
		OrderCombatDamageResp orderCombatDamageResp = 24;
		AssignDamageResp assignDamageResp = 25;
		SelectTargetsResp selectTargetsResp = 26;
		SelectReplacementResp selectReplacementResp = 27;
		SelectNGroupResp selectNGroupResp = 28;
		DistributionResp distributionResp = 30;
		NumericInputResp numericInputResp = 31;
		SearchResp searchResp = 32;
		EffectCostResp effectCostResp = 33;
		CastingTimeOptionsResp castingTimeOptionsResp = 34;
		SelectFromGroupsResp selectFromGroupsResp = 36;
		SearchFromGroupsResp searchFromGroupsResp = 37;
		GatherResp gatherResp = 38;
		UIMessage uiMessage = 40;
		SubmitDeckResp submitDeckResp = 41;
		ControlReq controlReq = 42;
		PerformAutoTapActionsResp performAutoTapActionsResp = 43;
		StringInputResp stringInputResp = 44;
		SelectCountersResp selectCountersResp = 45;
	}
	uint32 timerId = 100;
}

message ClientToMatchDoorConnectRequest {
	string matchId = 1;
	string mcFabricUri = 2;
	bytes clientToGreMessageBytes = 10;
}

message ClientToMatchServiceMessage {
	int32 requestId = 1;
	ClientToMatchServiceMessageType clientToMatchServiceMessageType = 2;
	int64 timestamp = 3;
	string transactionId = 4;
	bytes payload = 100;
}

enum ClientToMatchServiceMessageType {
	ClientToMatchServiceMessageType_None = 0;
	ClientToMatchServiceMessageType_ClientToMatchDoorConnectRequest = 1;
	ClientToMatchServiceMessageType_ClientToGREMessage = 2;
	ClientToMatchServiceMessageType_ClientToGREUIMessage = 3;
	ClientToMatchServiceMessageType_AuthenticateRequest = 4;
	ClientToMatchServiceMessageType_CreateMatchGameRoomRequest = 5;
	ClientToMatchServiceMessageType_EchoRequest = 8;
}

enum ClientType {
	ClientType_Invalid = 0;
	ClientType_User = 1;
	ClientType_Service = 2;
	ClientType_Familiar = 3;
}

message CombatDamageOrder {
	uint32 instanceId = 1;
	OrderReq recipients = 2;
	Prompt decisionPrompt = 3;
}

message CombatDamageOrderAssignment {
	uint32 instanceId = 1;
	OrderResp recipients = 2;
	Prompt decisionPrompt = 3;
}

message ConcedeReq {
	MatchScope scope = 1;
	uint32 gameNumber = 2;
}

message ConnectReq {
	SettingsMessage defaultSettings = 5;
	ProtoVersion protoVer = 6;
	Version grpVersion = 8;
}

message ConnectResp {
	ConnectionStatus status = 1;
	ProtoVersion protoVer = 6;
	SettingsMessage settings = 8;
	DeckMessage deckMessage = 9;
	Version grpVersion = 10;
	Version greVersion = 11;
	repeated CardSkinTuple skins = 12;
}

enum ConnectionState {
	ConnectionState_Invalid = 0;
	ConnectionState_Open = 1;
	ConnectionState_Closed = 2;
	ConnectionState_Connecting = 3;
	ConnectionState_Closing = 4;
}

enum ConnectionStatus {
	ConnectionStatus_None = 0;
	ConnectionStatus_Success = 1;
	ConnectionStatus_GRPVersionIncompat = 2;
	ConnectionStatus_ProtoVersionIncompat = 3;
}

message ContinuationToken {
	oneof message {
		int64 timestamp = 5;
	}
}

message ControlReq {
	ControllerType type = 1;
	uint32 controllerId = 2;
}

enum ControllerType {
	ControllerType_None = 0;
	ControllerType_Player = 1;
	ControllerType_AI = 2;
	ControllerType_AI_Goldfish = 3;
	ControllerType_AI_PetRock = 4;
}

message CorrelationInfo {
	string correlationId = 1;
}

message CosmeticConfig {
	uint32 seatId = 1;
	string data = 2;
}

message CosmeticInfo {
	uint32 seatId = 1;
	string data = 2;
}

message Cost {
	CostType type = 1;
	uint32 id = 2;
	uint32 objectId = 3;
	uint32 abilityGrpId = 4;
	uint32 index = 5;
	oneof message {
		ManaCost manaCost = 7;
		EffectCost effectCost = 8;
		LifeCost lifeCost = 9;
		LoyaltyCost loyaltyCost = 10;
		OrCost orCost = 11;
		AndCost andCost = 12;
	}
}

enum CostType {
	CostType_None = 0;
	CostType_Mana = 1;
	CostType_TapSelf = 2;
	CostType_SacSelf = 3;
	CostType_Effect = 4;
	CostType_Loyalty = 5;
	CostType_DiscardSelf = 6;
	CostType_Life = 7;
	CostType_ExileSelf = 8;
	CostType_UntapSelf = 9;
	CostType_Or = 10;
	CostType_And = 11;
}

message Counter {
	uint32 id = 1;
	CounterType type = 2;
	uint32 count = 3;
	uint32 sourceId = 4;
}

message CounterPair {
	uint32 instanceId = 1;
	CounterType counterType = 2;
	uint32 count = 3;
}

enum CounterType {
	CounterType_None = 0;
	CounterType_P1P1 = 1;
	CounterType_M1M1 = 2;
	CounterType_Poison = 3;
	CounterType_Wind = 4;
	CounterType_Time = 5;
	CounterType_Fade = 6;
	CounterType_Loyalty = 7;
	CounterType_Wish = 8;
	CounterType_Age = 9;
	CounterType_Aim = 10;
	CounterType_Arrow = 11;
	CounterType_Arrowhead = 12;
	CounterType_Awakening = 13;
	CounterType_Blaze = 14;
	CounterType_Blood = 15;
	CounterType_Bounty = 16;
	CounterType_Bribery = 17;
	CounterType_Carrion = 18;
	CounterType_Charge = 19;
	CounterType_Control = 20;
	CounterType_Corpse = 21;
	CounterType_Credit = 22;
	CounterType_Cube = 23;
	CounterType_Currency = 24;
	CounterType_Death = 25;
	CounterType_Delay = 26;
	CounterType_Depletion = 27;
	CounterType_Despair = 28;
	CounterType_Devotion = 29;
	CounterType_Divinity = 30;
	CounterType_Doom = 31;
	CounterType_Dream = 32;
	CounterType_Echo = 33;
	CounterType_Elixir = 34;
	CounterType_Energy = 35;
	CounterType_Eon = 36;
	CounterType_Eyeball = 37;
	CounterType_Fate = 38;
	CounterType_Feather = 39;
	CounterType_Filibuster = 40;
	CounterType_Flame = 41;
	CounterType_Flood = 42;
	CounterType_Fungus = 43;
	CounterType_Fuse = 44;
	CounterType_Glyph = 45;
	CounterType_Gold = 46;
	CounterType_Growth = 47;
	CounterType_Hatchling = 48;
	CounterType_Healing = 49;
	CounterType_Hoofprint = 50;
	CounterType_Hourglass = 51;
	CounterType_Hunger = 52;
	CounterType_Ice = 53;
	CounterType_Infection = 54;
	CounterType_Intervention = 55;
	CounterType_Javelin = 56;
	CounterType_Ki = 57;
	CounterType_Level = 58;
	CounterType_Luck = 59;
	CounterType_Magnet = 60;
	CounterType_Mannequin = 61;
	CounterType_Matrix = 62;
	CounterType_May = 63;
	CounterType_Mine = 64;
	CounterType_Mining = 65;
	CounterType_Mire = 66;
	CounterType_Muster = 67;
	CounterType_Net = 68;
	CounterType_Omen = 69;
	CounterType_Ore = 70;
	CounterType_Page = 71;
	CounterType_Pain = 72;
	CounterType_Paralyzation = 73;
	CounterType_Petal = 74;
	CounterType_Petrification = 75;
	CounterType_Phylactery = 76;
	CounterType_Pin = 77;
	CounterType_Plague = 78;
	CounterType_Polyp = 79;
	CounterType_Pressure = 80;
	CounterType_Pupa = 81;
	CounterType_Quest = 82;
	CounterType_Scream = 83;
	CounterType_Scroll = 84;
	CounterType_Shell = 85;
	CounterType_Shield = 86;
	CounterType_Shred = 87;
	CounterType_Sleep = 88;
	CounterType_Sleight = 89;
	CounterType_Slime = 90;
	CounterType_Soot = 91;
	CounterType_Spell = 92;
	CounterType_Spore = 93;
	CounterType_Storage = 94;
	CounterType_Strife = 95;
	CounterType_Study = 96;
	CounterType_Theft = 97;
	CounterType_Tide = 98;
	CounterType_Tower = 100;
	CounterType_Training = 101;
	CounterType_Trap = 102;
	CounterType_Treasure = 103;
	CounterType_Verse = 104;
	CounterType_Vitality = 105;
	CounterType_Wage = 106;
	CounterType_Winch = 107;
	CounterType_Lore = 108;
	CounterType_P1P2 = 109;
	CounterType_P0P1 = 110;
	CounterType_P0P2 = 111;
	CounterType_P1P0 = 112;
	CounterType_P2P2 = 113;
	CounterType_M0M1 = 114;
	CounterType_M0M2 = 115;
	CounterType_M1M0 = 116;
	CounterType_M2M1 = 117;
	CounterType_M2M2 = 118;
	CounterType_Manifestation = 119;
	CounterType_Gem = 120;
	CounterType_Crystal = 121;
	CounterType_Isolation = 122;
	CounterType_Hour = 123;
	CounterType_Unity = 124;
	CounterType_Velocity = 125;
	CounterType_Brick = 126;
	CounterType_Landmark = 127;
	CounterType_Prey = 128;
	CounterType_Silver = 129;
	CounterType_Egg = 130;
	CounterType_Hit = 131;
	CounterType_Knowledge = 132;
	CounterType_Task = 133;
	CounterType_Coin = 134;
	CounterType_Deathtouch = 135;
	CounterType_FirstStrike = 136;
	CounterType_Flying = 137;
	CounterType_Hexproof = 138;
	CounterType_Lifelink = 139;
	CounterType_Menace = 140;
	CounterType_Reach = 141;
	CounterType_Trample = 142;
	CounterType_Vigilance = 143;
	CounterType_Foreshadow = 144;
	CounterType_Incarnation = 145;
	CounterType_Soul = 146;
	CounterType_Voyage = 147;
	CounterType_Ghostform = 148;
	CounterType_Night = 149;
	CounterType_Indestructible = 150;
	CounterType_Hone = 151;
	CounterType_Book = 152;
	CounterType_Point = 153;
	CounterType_Enlightened = 154;
	CounterType_Harmony = 155;
	CounterType_Void = 156;
	CounterType_Ember = 157;
	CounterType_Ritual = 158;
	CounterType_Valor = 159;
	CounterType_Judgment = 160;
	CounterType_Invitation = 161;
	CounterType_Croak = 162;
	CounterType_Bloodline = 163;
	CounterType_Suspect = 164;
	CounterType_Acorn = 165;
	CounterType_Hatching = 166;
	CounterType_Stash = 167;
	CounterType_Collection = 168;
	CounterType_Rope = 169;
	CounterType_Ingenuity = 170;
	CounterType_Phyresis = 171;
	CounterType_Stun = 172;
	CounterType_Oil = 173;
	CounterType_Defense = 174;
	CounterType_Experience = 175;
	CounterType_Slumber = 176;
	CounterType_PHCT177 = 177;
	CounterType_PHCT178 = 178;
	CounterType_PHCT179 = 179;
	CounterType_PHCT180 = 180;
	CounterType_PHCT181 = 181;
	CounterType_PHCT182 = 182;
	CounterType_PHCT183 = 183;
	CounterType_PHCT184 = 184;
	CounterType_PHCT185 = 185;
}

message CreateMatchGameRoomRequest {
	MatchGameRoomConfig gameRoomConfig = 1;
}

message CreateMatchGameRoomResponseV2 {
	string mcFabricUri = 1;
}

message DamageAssigner {
	uint32 instanceId = 1;
	uint32 totalDamage = 2;
	repeated DamageAssignment assignments = 3;
	Prompt decisionPrompt = 4;
	bool canIgnoreBlockers = 5;
	bool forcePromptAssignment = 6;
}

message DamageAssignment {
	uint32 instanceId = 1;
	uint32 minDamage = 2;
	uint32 maxDamage = 3;
	uint32 assignedDamage = 4;
}

enum DamageRecType {
	DamageRecType_None = 0;
	DamageRecType_Team = 1;
	DamageRecType_Player = 2;
	DamageRecType_PlanesWalker = 3;
}

message DamageRecipient {
	enum IdOneofCase {
		None = 0;
		TeamId = 2;
		PlayerSystemSeatId = 3;
		PlaneswalkerInstanceId = 4;
	}

	DamageRecType type = 1;
	uint32 teamId = 2;
	uint32 playerSystemSeatId = 3;
	uint32 planeswalkerInstanceId = 4;
}

message DeckConfig {
	uint32 seatId = 1;
	repeated CardConfig deckCards = 2;
	repeated CardConfig sideboardCards = 3;
	repeated CardConfig commanderCards = 4;
	string deckFilePath = 5;
}

message DeckConstraintInfo {
	uint32 minDeckSize = 1;
	uint32 maxDeckSize = 2;
	uint32 minSideboardSize = 3;
	uint32 maxSideboardSize = 4;
	uint32 minCommanderSize = 5;
	uint32 maxCommanderSize = 6;
}

message DeckMessage {
	repeated uint32 deckCards = 1;
	repeated uint32 sideboardCards = 2;
	repeated uint32 commanderCards = 3;
	uint32 deckMessageFieldFour = 4;
}

message DeclareAttackersReq {
	repeated Attacker attackers = 1;
	bool hasRequirements = 2;
	bool hasRestrictions = 3;
	repeated AttackWarning attackWarnings = 4;
	repeated ManaRequirement manaCost = 5;
	repeated Attacker qualifiedAttackers = 7;
	bool canSubmitAttackers = 8;
}

message DeclareAttackersResp {
	repeated Attacker selectedAttackers = 1;
	bool autoDeclare = 2;
	DamageRecipient autoDeclareDamageRecipient = 3;
}

message DeclareBlockersReq {
	repeated Blocker blockers = 1;
	bool hasRequirements = 2;
	bool hasRestrictions = 3;
	repeated BlockWarning blockWarnings = 4;
}

message DeclareBlockersResp {
	repeated Blocker selectedBlockers = 1;
}

message DieRollResultsResp {
	repeated PlayerDieRoll playerDieRolls = 1;
}

message Distribution {
	uint32 instanceId = 1;
	uint32 amount = 2;
}

message DistributionReq {
	uint32 minAmount = 2;
	uint32 maxAmount = 3;
	uint32 minPerTarget = 4;
	repeated uint32 targetIds = 5;
	repeated uint32 existingDistributionValues = 6;
	repeated uint32 requiredDistributionValues = 7;
	repeated uint32 validSelectedTargetIds = 8;
	uint32 sourceId = 9;
}

message DistributionResp {
	repeated Distribution distributions = 2;
}

message DoubleValue {
	double value = 1;
}

message DoubleValues {
	repeated double values = 1;
}

message EchoRequest {
	string message = 1;
}

message EchoResponse {
	string message = 1;
}

message EdictalMessage {
	ClientToGREMessage edictMessage = 1;
}

message EffectCost {
	repeated CardMechanicType cardMechanicTypes = 1;
	EffectCostType effectCostType = 2;
	int32 count = 3;
}

message EffectCostReq {
	EffectCostType effectCostType = 3;
	oneof message {
		SelectNReq costSelection = 4;
		SelectCountersReq counterSelection = 5;
		SelectFromGroupsReq groupSelection = 6;
		GatherReq gatherReq = 7;
	}
}

message EffectCostResp {
	EffectCostType effectCostType = 2;
	oneof message {
		SelectNResp costSelection = 3;
		SelectCountersResp counterSelection = 4;
		SelectFromGroupsResp groupSelection = 5;
		GatherResp gatherResp = 38;
	}
}

enum EffectCostType {
	EffectCostType_None = 0;
	EffectCostType_Select = 1;
	EffectCostType_SelectCounter = 2;
	EffectCostType_Autoselect = 3;
	EffectCostType_SelectFromGroups = 4;
	EffectCostType_GatherCounters = 5;
}

enum FailureReason {
	FailureReason_None = 0;
	FailureReason_Expired = 1;
	FailureReason_OutOfTurn = 2;
	FailureReason_ReqRespMismatch = 3;
	FailureReason_ActionNotBatchable = 4;
	FailureReason_ActionInvalid = 5;
	FailureReason_IncompleteMessage = 6;
	FailureReason_IllegalOption = 7;
	FailureReason_UnrecognizedValue = 8;
	FailureReason_TargetsUnavailable = 9;
	FailureReason_TargetIndexOutOfRange = 10;
	FailureReason_TargetIllegal = 11;
	FailureReason_UnrecognizedManaId = 12;
	FailureReason_InvalidOptionSelection = 13;
	FailureReason_UnexpectedMessage = 14;
	FailureReason_LimitViolation = 15;
	FailureReason_RestrictionViolated = 16;
	FailureReason_RequirementViolated = 17;
	FailureReason_UnpayableCost = 18;
	FailureReason_InvalidSeatId = 19;
	FailureReason_InvalidTeamId = 20;
	FailureReason_InvalidMatchState = 21;
	FailureReason_InvalidMatchScope = 22;
	FailureReason_InvalidDeck = 23;
	FailureReason_InvalidCancelState = 24;
	FailureReason_InvalidUndoState = 25;
	FailureReason_PermissionDenied = 26;
	FailureReason_NoTimeout = 27;
	FailureReason_InvalidColor = 28;
	FailureReason_InvalidManaColor = 29;
	FailureReason_InvalidCoinFace = 30;
	FailureReason_InvalidCard = 31;
	FailureReason_InvalidCardName = 32;
	FailureReason_InvalidCardType = 33;
	FailureReason_InvalidSubType = 34;
	FailureReason_InvalidSuperType = 35;
	FailureReason_InvalidCounterType = 36;
	FailureReason_InvalidAbilityType = 37;
	FailureReason_InvalidBasicLandType = 38;
	FailureReason_InvalidOptionIndex = 39;
	FailureReason_InvalidOptionContext = 40;
	FailureReason_InvalidSideboard = 41;
	FailureReason_InvalidCommander = 42;
	FailureReason_DuplicateAttacker = 43;
	FailureReason_UnexpectedDamageRecipient = 44;
	FailureReason_InvalidAttacker = 45;
	FailureReason_RedundantAttacker = 46;
	FailureReason_InvalidBatchAttack = 47;
	FailureReason_MissingDamageRecipient = 48;
	FailureReason_InvalidDamageRecipient = 49;
	FailureReason_InvalidObjective = 50;
	FailureReason_InvalidAlternativeAttack = 51;
	FailureReason_MissingAttackers = 52;
	FailureReason_UnexpectedAttackers = 53;
	FailureReason_InvalidParity = 54;
	FailureReason_InvalidAlternativeAttackModification = 55;
	FailureReason_DisallowedValue = 56;
	FailureReason_InvalidTypeKind = 57;
	FailureReason_InvalidWishCard = 58;
	FailureReason_InvalidController = 59;
	FailureReason_InvalidCardColor = 60;
}

message FinalMatchResult {
	string matchId = 1;
	ResultSpec matchForceResult = 2;
	MatchCompletedReasonType matchCompletedReason = 3;
	repeated ResultSpec resultList = 5;
	string errorMessage = 10;
}

message FloatValue {
	float value = 1;
}

message FloatValues {
	repeated float values = 1;
}

message ForceDrawReq {
	MatchScope scope = 1;
}

message GRECancelScheduledMessage {
	uint32 timerId = 1;
}

message GRECheckpointRequest {
}

message GREConfigRequest {
	GREConfiguration greConfiguration = 1;
}

message GREConfiguration {
	GameStateRedactorConfiguration gameStateRedactorConfiguration = 1;
	CLIPSConfiguration clipsConfiguration = 2;
	CheckpointConfiguration checkpointConfiguration = 3;
}

message GRECreateRequest {
	string matchID = 2;
}

message GREDestroyRequest {
}

message GREElapseTimeRequest {
	uint32 timerId = 1;
	uint32 timeMs = 2;
}

message GREExpireTimerRequest {
	uint32 timerId = 1;
}

message GREForceResultRequest {
	ResultSpec result = 1;
}

message GREInterpretRequest {
	string clips = 1;
}

enum GREMessageType {
	GREMessageType_None = 0;
	GREMessageType_GameStateMessage = 1;
	GREMessageType_ActionsAvailableReq = 2;
	GREMessageType_ChooseStartingPlayerReq = 6;
	GREMessageType_ConnectResp = 7;
	GREMessageType_GetSettingsResp = 9;
	GREMessageType_SetSettingsResp = 10;
	GREMessageType_GroupReq = 11;
	GREMessageType_IllegalRequest = 12;
	GREMessageType_MulliganReq = 15;
	GREMessageType_OrderReq = 17;
	GREMessageType_PromptReq = 18;
	GREMessageType_RevealHandReq = 21;
	GREMessageType_SelectNReq = 22;
	GREMessageType_AllowForceDraw = 24;
	GREMessageType_BinaryGameState = 25;
	GREMessageType_DeclareAttackersReq = 26;
	GREMessageType_SubmitAttackersResp = 27;
	GREMessageType_DeclareBlockersReq = 28;
	GREMessageType_SubmitBlockersResp = 29;
	GREMessageType_AssignDamageReq = 30;
	GREMessageType_AssignDamageConfirmation = 31;
	GREMessageType_OrderCombatDamageReq = 32;
	GREMessageType_OrderDamageConfirmation = 33;
	GREMessageType_SelectTargetsReq = 34;
	GREMessageType_SubmitTargetsResp = 35;
	GREMessageType_PayCostsReq = 36;
	GREMessageType_IntermissionReq = 37;
	GREMessageType_DieRollResultsResp = 38;
	GREMessageType_SelectReplacementReq = 39;
	GREMessageType_SelectNGroupReq = 40;
	GREMessageType_DistributionReq = 42;
	GREMessageType_NumericInputReq = 43;
	GREMessageType_SearchReq = 44;
	GREMessageType_OptionalActionMessage = 45;
	GREMessageType_CastingTimeOptionsReq = 46;
	GREMessageType_SelectFromGroupsReq = 48;
	GREMessageType_SearchFromGroupsReq = 49;
	GREMessageType_GatherReq = 50;
	GREMessageType_QueuedGameStateMessage = 51;
	GREMessageType_UIMessage = 52;
	GREMessageType_SubmitDeckReq = 53;
	GREMessageType_EdictalMessage = 54;
	GREMessageType_TimeoutMessage = 55;
	GREMessageType_TimerStateMessage = 56;
	GREMessageType_SubmitDeckConfirmation = 57;
	GREMessageType_StringInputReq = 58;
	GREMessageType_SelectCountersReq = 59;
}

message GREResumeMatchRequest {
	BinaryGameState binaryGameState = 1;
}

message GREScheduledMessage {
	uint32 timerId = 1;
	int32 delayMs = 2;
	ServerToGREMessage message = 3;
}

message GREStartDelayedTimerMessage {
	uint32 seatId = 1;
}

message GREStartMatchRequest {
	MatchConfig matchConfig = 1;
}

message GRETickMessage {
}

message GRETimeoutMessage {
	uint32 seatId = 1;
	TimeoutType type = 2;
}

message GRETimerExpiredMessage {
	uint32 expiredTimerId = 1;
	oneof message {
		ServerToGREMessage serverToGREMessage = 2;
		ClientToGREMessage clientToGREMessage = 3;
	}
}

message GREToAnyMessage {
	int64 timestamp = 1;
	oneof message {
		GREToServerMessage gREToServerMessage = 2;
		GREToClientMessage gREToClientMessage = 3;
	}
}

message GREToClientMessage {
	GREMessageType type = 1;
	repeated uint32 systemSeatIds = 2;
	uint32 msgId = 3;
	uint32 gameStateId = 4;
	oneof message {
		GameStateMessage gameStateMessage = 5;
		ChooseStartingPlayerReq chooseStartingPlayerReq = 7;
		OptionalActionMessage optionalActionMessage = 8;
		ActionsAvailableReq actionsAvailableReq = 9;
		OrderReq orderReq = 10;
		GroupReq groupReq = 11;
		SelectNReq selectNReq = 12;
		MulliganReq mulliganReq = 14;
		GetSettingsResp getSettingsResp = 16;
		SetSettingsResp setSettingsResp = 17;
		ConnectResp connectResp = 18;
		IllegalRequestMessage illegalRequestMessage = 19;
		BinaryGameState binaryGameState = 23;
		DeclareAttackersReq declareAttackersReq = 24;
		SubmitAttackersResp submitAttackersResp = 25;
		DeclareBlockersReq declareBlockersReq = 26;
		SubmitBlockersResp submitBlockersResp = 27;
		AssignDamageReq assignDamageReq = 28;
		AssignDamageConfirmation assignDamageConfirmation = 29;
		OrderCombatDamageReq orderCombatDamageReq = 30;
		OrderDamageConfirmation orderDamageConfirmation = 31;
		SelectTargetsReq selectTargetsReq = 32;
		SubmitTargetsResp submitTargetsResp = 33;
		PayCostsReq payCostsReq = 34;
		IntermissionReq intermissionReq = 36;
		DieRollResultsResp dieRollResultsResp = 37;
		SelectReplacementReq selectReplacementReq = 38;
		SelectNGroupReq selectNGroupReq = 39;
		DistributionReq distributionReq = 41;
		NumericInputReq numericInputReq = 42;
		SearchReq searchReq = 43;
		CastingTimeOptionsReq castingTimeOptionsReq = 44;
		SelectFromGroupsReq selectFromGroupsReq = 47;
		SearchFromGroupsReq searchFromGroupsReq = 48;
		GatherReq gatherReq = 49;
		UIMessage uiMessage = 51;
		SubmitDeckReq submitDeckReq = 52;
		EdictalMessage edictalMessage = 53;
		TimeoutMessage timeoutMessage = 54;
		TimerStateMessage timerStateMessage = 55;
		StringInputReq stringInputReq = 57;
		SelectCountersReq selectCountersReq = 58;
	}
	Prompt prompt = 6;
	bool informationalUseOnly = 45;
	AllowCancel allowCancel = 50;
	bool allowUndo = 56;
}

message GREToServerMessage {
	uint32 msgId = 1;
	oneof message {
		BinaryGameState binaryGameState = 2;
		ReportResultMessage reportResultMessage = 3;
		GREScheduledMessage scheduledMessage = 4;
		GRECancelScheduledMessage cancelScheduledMessage = 5;
		GameMetrics gameMetrics = 6;
	}
}

message GameInfo {
	string matchID = 1;
	uint32 gameNumber = 3;
	GameStage stage = 5;
	GameType type = 6;
	GameVariant variant = 7;
	MatchState matchState = 8;
	MatchWinCondition matchWinCondition = 9;
	uint32 maxTimeoutCount = 10;
	uint32 maxPipCount = 11;
	uint32 timeoutDurationSec = 12;
	repeated ResultSpec results = 13;
	SuperFormat superFormat = 14;
	MulliganType mulliganType = 15;
	uint32 freeMulliganCount = 16;
	DeckConstraintInfo deckConstraintInfo = 17;
	bool sideboardLoadingEnabled = 18;
}

message GameMetrics {
	repeated PlayerMetrics playerMetrics = 1;
}

message GameObjectInfo {
	uint32 instanceId = 1;
	uint32 grpId = 2;
	GameObjectType type = 4;
	uint32 zoneId = 5;
	Visibility visibility = 6;
	uint32 ownerSeatId = 7;
	uint32 controllerSeatId = 8;
	repeated SuperType superTypes = 9;
	repeated CardType cardTypes = 10;
	repeated SubType subtypes = 11;
	repeated CardColor color = 12;
	Int32Value power = 13;
	Int32Value toughness = 14;
	bool isCopy = 16;
	bool isTapped = 17;
	bool hasSummoningSickness = 18;
	AttackState attackState = 19;
	BlockState blockState = 20;
	uint32 damage = 23;
	AttackInfo attackInfo = 24;
	BlockInfo blockInfo = 25;
	repeated uint32 viewers = 26;
	UInt32Value loyalty = 27;
	uint32 objectSourceGrpId = 28;
	uint32 name = 29;
	repeated uint32 abilities = 30;
	uint32 parentId = 31;
	uint32 overlayGrpId = 32;
	bool isFacedown = 33;
	string skinCode = 34;
	UInt32Value loyaltyUsed = 35;
	repeated uint32 abilityOriginalCardGrpIds = 36;
	string baseSkinCode = 37;
	repeated SubType removedSubtypes = 38;
	UInt32Value defense = 39;
}

enum GameObjectType {
	GameObjectType_None = 0;
	GameObjectType_Card = 1;
	GameObjectType_Token = 2;
	GameObjectType_Ability = 3;
	GameObjectType_Emblem = 4;
	GameObjectType_SplitCard = 5;
	GameObjectType_SplitLeft = 6;
	GameObjectType_SplitRight = 7;
	GameObjectType_RevealedCard = 8;
	GameObjectType_TriggerHolder = 9;
	GameObjectType_Adventure = 10;
	GameObjectType_MDFCBack = 11;
	GameObjectType_DisturbBack = 12;
	GameObjectType_Boon = 13;
	GameObjectType_PrototypeFacet = 14;
	GameObjectType_Placeholder15 = 15;
	GameObjectType_Placeholder16 = 16;
}

enum GameStage {
	GameStage_None = 0;
	GameStage_Start = 1;
	GameStage_Play = 2;
	GameStage_GameOver = 3;
}

message GameStateMessage {
	GameStateType type = 1;
	uint32 gameStateId = 2;
	GameInfo gameInfo = 3;
	repeated TeamInfo teams = 4;
	repeated PlayerInfo players = 5;
	TurnInfo turnInfo = 6;
	repeated ZoneInfo zones = 7;
	repeated GameObjectInfo gameObjects = 8;
	repeated AnnotationInfo annotations = 9;
	repeated uint32 diffDeletedInstanceIds = 10;
	uint32 pendingMessageCount = 11;
	uint32 prevGameStateId = 12;
	repeated TimerInfo timers = 13;
	GameStateUpdate update = 14;
	repeated ActionInfo actions = 15;
	repeated AnnotationInfo persistentAnnotations = 16;
	repeated uint32 diffDeletedPersistentAnnotationIds = 17;
}

message GameStateRedactorConfiguration {
	bool enableRedaction = 1;
	bool enableForceDiff = 2;
	bool enableZoneRedaction = 3;
}

enum GameStateType {
	GameStateType_None = 0;
	GameStateType_Full = 1;
	GameStateType_Diff = 2;
	GameStateType_Binary = 3;
}

enum GameStateUpdate {
	GameStateUpdate_None = 0;
	GameStateUpdate_Send = 1;
	GameStateUpdate_SendAndRecord = 2;
	GameStateUpdate_SendHiFi = 3;
	GameStateUpdate_Undo = 4;
	GameStateUpdate_Restore = 5;
}

enum GameType {
	GameType_None = 0;
	GameType_Duel = 1;
	GameType_MultiPlayer = 2;
	GameType_Solitaire = 3;
}

enum GameVariant {
	GameVariant_None = 0;
	GameVariant_Normal = 1;
	GameVariant_Planechase = 2;
	GameVariant_Vanguard = 3;
	GameVariant_Commander = 4;
	GameVariant_Archenemy = 5;
	GameVariant_TeamVsTeam = 6;
	GameVariant_TwoHeadedGiant = 7;
	GameVariant_Brawl = 8;
	GameVariant_Placeholder9 = 9;
	GameVariant_Placeholder10 = 10;
	GameVariant_Placeholder11 = 11;
	GameVariant_Placeholder12 = 12;
	GameVariant_Placeholder13 = 13;
}

message GatherReq {
	uint32 destinationId = 2;
	repeated GatherSource sources = 3;
	uint32 amountToGather = 4;
}

message GatherResp {
	repeated Gathering gatherings = 2;
}

message GatherSource {
	uint32 sourceId = 1;
	uint32 minAmount = 2;
	uint32 maxAmount = 3;
}

message Gathering {
	uint32 instanceId = 1;
	uint32 amount = 2;
}

message GetSettingsResp {
	SettingsMessage settings = 1;
}

message GreToClientEvent {
	repeated GREToClientMessage greToClientMessages = 1;
}

message Group {
	repeated uint32 ids = 1;
	int32 groupId = 2;
	ZoneType zoneType = 3;
	SubZoneType subZoneType = 4;
	int32 minSelect = 5;
	int32 maxSelect = 6;
	bool isFacedown = 7;
}

message GroupReq {
	repeated uint32 instanceIds = 1;
	repeated GroupSpecification groupSpecs = 2;
	uint32 totalSelected = 3;
	GroupType groupType = 5;
	GroupingContext context = 6;
	uint32 sourceId = 7;
}

message GroupResp {
	repeated Group groups = 1;
	GroupType groupType = 3;
}

message GroupSpecification {
	uint32 lowerBound = 1;
	uint32 upperBound = 2;
	ZoneType zoneType = 3;
	SubZoneType subZoneType = 4;
	bool isFacedown = 6;
}

enum GroupType {
	GroupType_None = 0;
	GroupType_Ordered = 1;
	GroupType_Arbitrary = 2;
}

enum GroupingContext {
	GroupingContext_None = 0;
	GroupingContext_Scry = 1;
	GroupingContext_Surveil = 2;
	GroupingContext_LondonMulligan = 3;
}

enum GroupingStyle {
	GroupingStyle_None = 0;
	GroupingStyle_SingleGroup = 1;
	GroupingStyle_AllGroups = 2;
	GroupingStyle_Mixed = 3;
}

enum HighlightType {
	HighlightType_None = 0;
	HighlightType_Cold = 1;
	HighlightType_Tepid = 2;
	HighlightType_Hot = 3;
	HighlightType_Counterspell = 4;
	HighlightType_Random = 5;
	HighlightType_CopySpell = 6;
}

message IRLoaderConfiguration {
	bool enableLimitedIRLoading = 1;
}

enum IdType {
	IdType_None = 0;
	IdType_InstanceId = 1;
	IdType_PromptParameterIndex = 2;
	IdType_ZoneInstanceId = 3;
	IdType_CardGrpId = 4;
	IdType_AbilityGrpId = 5;
	IdType_CardGrpIdIndex = 6;
	IdType_ManaId = 7;
}

message IllegalRequestMessage {
	ClientToGREMessage invalidMessage = 1;
	FailureReason reason = 2;
}

message Int32Value {
	int32 value = 1;
}

message Int32Values {
	repeated int32 values = 1;
}

message Int64Value {
	int64 value = 1;
}

message Int64Values {
	repeated int64 values = 1;
}

message IntermissionReq {
	repeated UserOption options = 1;
	Prompt intermissionPrompt = 2;
	ResultSpec result = 5;
}

message KeyValuePair {
	enum ValueOneofCase {
		None = 0;
		SingleValue = 2;
		RepeatedValue = 3;
	}

	string key = 1;
	SingleValue singleValue = 2;
	RepeatedValue repeatedValue = 3;
}

message KeyValuePairInfo {
	string key = 1;
	KeyValuePairValueType type = 2;
	repeated uint32 valueUint32 = 3;
	repeated int32 valueInt32 = 4;
	repeated uint64 valueUint64 = 5;
	repeated int64 valueInt64 = 6;
	repeated bool valueBool = 7;
	repeated string valueString = 8;
	repeated float valueFloat = 9;
	repeated double valueDouble = 10;
}

enum KeyValuePairValueType {
	KeyValuePairValueType_None = 0;
	KeyValuePairValueType_uint32 = 1;
	KeyValuePairValueType_int32 = 2;
	KeyValuePairValueType_uint64 = 3;
	KeyValuePairValueType_int64 = 4;
	KeyValuePairValueType_bool = 5;
	KeyValuePairValueType_string = 6;
	KeyValuePairValueType_float = 7;
	KeyValuePairValueType_double = 8;
}

message LifeCost {
	int32 count = 1;
}

message LoyaltyCost {
	int32 count = 1;
}

enum ManaColor {
	ManaColor_None = 0;
	ManaColor_White = 1;
	ManaColor_Blue = 2;
	ManaColor_Black = 3;
	ManaColor_Red = 4;
	ManaColor_Green = 5;
	ManaColor_Phyrexian = 6;
	ManaColor_Generic = 7;
	ManaColor_X = 8;
	ManaColor_Y = 9;
	ManaColor_TwoGeneric = 10;
	ManaColor_AnyColor = 11;
	ManaColor_Colorless = 12;
	ManaColor_Snow = 13;
}

message ManaCost {
	repeated ManaColor color = 1;
	int32 count = 2;
}

message ManaInfo {
	message Spec {
		ManaSpecType type = 1;
	}

	uint32 manaId = 1;
	ManaColor color = 2;
	uint32 srcInstanceId = 3;
	repeated Spec specs = 4;
	uint32 abilityGrpId = 5;
	repeated uint32 linkedSelections = 6;
}

message ManaPaymentCondition {
	repeated ManaColor colors = 1;
	repeated ManaSpecType specs = 2;
	uint32 abilityGrpId = 3;
	ManaPaymentConditionType type = 4;
}

enum ManaPaymentConditionType {
	ManaPaymentConditionType_None = 0;
	ManaPaymentConditionType_Threshold = 1;
	ManaPaymentConditionType_Maximum = 2;
	ManaPaymentConditionType_Diversity = 3;
	ManaPaymentConditionType_Uniformity = 4;
}

message ManaPaymentOption {
	repeated ManaInfo mana = 2;
	uint32 optionIndex = 4;
	bool haveReplacementsBeenApplied = 5;
	bool haveTriggersBeenApplied = 6;
	bool isUnpredictable = 7;
}

enum ManaPaymentStrategyType {
	ManaPaymentStrategyType_None = 0;
	ManaPaymentStrategyType_Auto = 1;
	ManaPaymentStrategyType_Manual = 2;
	ManaPaymentStrategyType_Legacy = 3;
}

message ManaRequirement {
	repeated ManaColor color = 1;
	int32 count = 2;
	uint32 costId = 3;
	uint32 objectId = 4;
	uint32 abilityGrpId = 5;
}

enum ManaSelectionType {
	ManaSelectionType_None = 0;
	ManaSelectionType_Auto = 1;
	ManaSelectionType_Manual = 2;
}

enum ManaSpecType {
	ManaSpecType_None = 0;
	ManaSpecType_FromBasic = 1;
	ManaSpecType_Predictive = 2;
	ManaSpecType_Restricted = 3;
	ManaSpecType_Trigger = 4;
	ManaSpecType_FromCreature = 5;
	ManaSpecType_FromSnow = 6;
	ManaSpecType_DoesNotEmpty = 7;
	ManaSpecType_AdditionalEffect = 8;
	ManaSpecType_FromTreasure = 9;
}

enum MatchCompletedReasonType {
	MatchCompletedReasonType_Invalid = 0;
	MatchCompletedReasonType_Success = 1;
	MatchCompletedReasonType_ForceResultRequest = 2;
	MatchCompletedReasonType_Canceled = 3;
	MatchCompletedReasonType_PlayerJoinTimeout = 10;
	MatchCompletedReasonType_PlayerInactivityTimeout = 11;
	MatchCompletedReasonType_PlayerDisconnectTimeout = 12;
	MatchCompletedReasonType_SystemShutdown = 30;
	MatchCompletedReasonType_GreError = 31;
	MatchCompletedReasonType_ServiceFabricError = 33;
	MatchCompletedReasonType_CodeContractError = 34;
	MatchCompletedReasonType_UnknownServerError = 40;
}

message MatchConfig {
	GameType gameType = 1;
	GameVariant gameVariant = 2;
	MatchWinCondition winCondition = 3;
	uint32 maxPlayerHandSize = 5;
	repeated TeamConfig teams = 6;
	TestConfig testConfig = 9;
	MulliganType mulliganType = 10;
	repeated TimerConfig timerConfigs = 11;
	TimerPackage timerPackage = 12;
	TimeoutConfig timeoutConfig = 13;
	repeated CosmeticConfig cosmeticConfigs = 14;
	SuperFormat superFormat = 15;
	DeckConstraintInfo deckConstraintInfo = 16;
}

message MatchGameRoomConfig {
	string eventId = 2;
	repeated MatchGameRoomPlayerInfo reservedPlayers = 8;
	string matchId = 11;
	MatchConfig matchConfig = 12;
	GREConfiguration greConfig = 13;
	bool isVisible = 20;
	string greHostLoggerLevel = 31;
	int32 joinRoomTimeoutSecs = 35;
	int32 playerDisconnectTimeoutSecs = 36;
}

message MatchGameRoomInfo {
	MatchGameRoomConfig gameRoomConfig = 2;
	MatchGameRoomStateType stateType = 3;
	FinalMatchResult finalMatchResult = 4;
	repeated MatchGameRoomPlayerInfo players = 6;
	repeated MatchPlayerMetrics playerMetrics = 7;
}

message MatchGameRoomPlayerInfo {
	string userId = 1;
	string playerName = 2;
	int32 systemSeatId = 3;
	int32 teamId = 4;
	UserConnectionInfo connectionInfo = 5;
	string courseId = 10;
	string deckId = 11;
	string sessionId = 13;
	bool isWotc = 14;
	string platformId = 15;
	bool isBotPlayer = 16;
	string eventId = 17;
}

message MatchGameRoomStateChangedEvent {
	MatchGameRoomInfo gameRoomInfo = 1;
}

enum MatchGameRoomStateType {
	MatchGameRoomStateType_Invalid = 0;
	MatchGameRoomStateType_WaitingForPlayersToJoin = 1;
	MatchGameRoomStateType_StartPending = 2;
	MatchGameRoomStateType_WaitingForGreConnections = 3;
	MatchGameRoomStateType_Playing = 5;
	MatchGameRoomStateType_MatchCompleted = 15;
	MatchGameRoomStateType_MatchResultsProcessed = 20;
	MatchGameRoomStateType_GameRoomClosing = 21;
	MatchGameRoomStateType_GameRoomClosed = 22;
}

message MatchPlayerMetrics {
	string userId = 1;
	repeated PlayerMetricKeyValuePair metrics = 2;
}

enum MatchScope {
	MatchScope_None = 0;
	MatchScope_Game = 1;
	MatchScope_Match = 2;
}

message MatchServiceError {
	MatchServiceErrorCode errorCode = 2;
	string errorMessage = 3;
}

enum MatchServiceErrorCode {
	MatchServiceErrorCode_Invalid = 0;
	MatchServiceErrorCode_Success = 1;
	MatchServiceErrorCode_GreError = 100;
	MatchServiceErrorCode_OperationCanceled = 101;
	MatchServiceErrorCode_InvalidUser = 102;
	MatchServiceErrorCode_InvalidState = 103;
	MatchServiceErrorCode_CreateRoomFailed = 104;
	MatchServiceErrorCode_AuthRequired = 105;
	MatchServiceErrorCode_NotFound = 106;
	MatchServiceErrorCode_ServiceFabricTransactionError = 107;
	MatchServiceErrorCode_BadRequest = 108;
	MatchServiceErrorCode_GameRoomFull = 110;
	MatchServiceErrorCode_NotAuthorized = 111;
	MatchServiceErrorCode_BufferOverflow = 112;
	MatchServiceErrorCode_ImmutableProperty = 113;
	MatchServiceErrorCode_ServerBusy = 114;
	MatchServiceErrorCode_RequestQueueOverflow = 115;
	MatchServiceErrorCode_UnknownServerError = 500;
}

message MatchServiceToClientMessage {
	string transactionId = 1;
	int32 requestId = 3;
	int64 timestamp = 4;
	oneof message {
		MatchServiceError error = 7;
		GreToClientEvent greToClientEvent = 8;
		MatchGameRoomStateChangedEvent matchGameRoomStateChangedEvent = 9;
		AuthenticateResponse authenticateResponse = 100;
		CreateMatchGameRoomResponseV2 createMatchGameRoomResponseV2 = 201;
		EchoResponse echoResponse = 1000;
	}
}

enum MatchState {
	MatchState_None = 0;
	MatchState_GameInProgress = 1;
	MatchState_GameComplete = 2;
	MatchState_MatchComplete = 3;
	MatchState_Sideboarding = 4;
}

enum MatchWinCondition {
	MatchWinCondition_None = 0;
	MatchWinCondition_SingleElimination = 1;
	MatchWinCondition_Best2of3 = 2;
	MatchWinCondition_Best3of5 = 3;
}

message ModalOption {
	uint32 grpId = 1;
}

message ModalReq {
	repeated ModalOption modalOptions = 1;
	uint32 abilityGrpId = 2;
	uint32 minSel = 3;
	uint32 maxSel = 4;
	bool repeatedSelectAllowed = 5;
	repeated ModalOption excludedOptions = 6;
}

enum MulliganOption {
	MulliganOption_None = 0;
	MulliganOption_Mulligan = 1;
	MulliganOption_AcceptHand = 2;
}

message MulliganReq {
	MulliganType mulliganType = 1;
	uint32 freeMulliganCount = 2;
	uint32 mulliganCount = 3;
}

message MulliganResp {
	MulliganOption decision = 1;
}

enum MulliganType {
	MulliganType_None = 0;
	MulliganType_Paris = 1;
	MulliganType_Vancouver = 2;
	MulliganType_London = 3;
}

message NumericInputReq {
	uint32 minValue = 2;
	uint32 maxValue = 3;
	uint32 stepSize = 4;
	uint32 sourceId = 5;
	NumericInputType numericInputType = 6;
	repeated uint32 disallowedValues = 7;
	repeated uint32 suggestedValues = 8;
}

message NumericInputResp {
	uint32 numericInputValue = 2;
}

enum NumericInputType {
	NumericInputType_None = 0;
	NumericInputType_ChooseX = 1;
	NumericInputType_ChooseAnyAmount = 2;
	NumericInputType_DebugCode = 3;
	NumericInputType_ChooseDieRoll = 4;
}

message OnChat {
	string text = 1;
}

message OnGenericEvent {
	string category = 1;
	string payload = 2;
}

message OnHover {
	uint32 objectId = 1;
}

message OnSelect {
	uint32 objectId = 1;
}

message OnShuffle {
	repeated uint32 objectIds = 1;
}

enum OptionContext {
	OptionContext_None = 0;
	OptionContext_ManaAbility = 1;
	OptionContext_Payment = 2;
	OptionContext_Stacking = 3;
	OptionContext_Targeting = 4;
	OptionContext_Resolution = 5;
	OptionContext_TurnBased = 6;
	OptionContext_Replacement = 7;
	OptionContext_ActivateCast = 8;
	OptionContext_Special = 9;
}

enum OptionResponse {
	OptionResponse_None = 0;
	OptionResponse_Cancel = -1;
	OptionResponse_Allow_Yes = 1;
	OptionResponse_Cancel_No = 2;
}

message OptionalActionMessage {
	Prompt prompt = 1;
	uint32 sourceId = 3;
	repeated CardMechanicType optionalActionTypes = 4;
	repeated uint32 recipientIds = 5;
	HighlightType highlight = 6;
}

message OptionalResp {
	OptionResponse response = 1;
	ChoicePersistence persistence = 2;
	SettingScope appliesTo = 3;
	SettingKey mapTo = 4;
}

message OrCost {
	repeated Cost costs = 1;
	bool isOptional = 2;
}

message OrderCombatDamageReq {
	OrderCombatDamageType orderDamageType = 1;
	repeated CombatDamageOrder orders = 2;
}

message OrderCombatDamageResp {
	OrderCombatDamageType orderDamageType = 1;
	repeated CombatDamageOrderAssignment orders = 2;
}

enum OrderCombatDamageType {
	OrderCombatDamageType_None = 0;
	OrderCombatDamageType_Attacker = 1;
	OrderCombatDamageType_Blocker = 2;
}

message OrderDamageConfirmation {
	ResultCode result = 1;
	OrderCombatDamageType orderDamageType = 2;
}

message OrderReq {
	repeated uint32 ids = 1;
	OrderingContext orderingContext = 3;
}

message OrderResp {
	repeated uint32 ids = 1;
	OrderingType ordering = 2;
}

message OrderedDamageAssignment {
	uint32 instanceId = 1;
	uint32 assignedDamage = 2;
}

enum OrderingContext {
	OrderingContext_None = 0;
	OrderingContext_OrderingForBottom = 1;
	OrderingContext_OrderingForTop = 2;
}

enum OrderingType {
	OrderingType_None = 0;
	OrderingType_OrderAsIndicated = 1;
	OrderingType_OrderArbitraryOnce = 2;
	OrderingType_OrderArbitraryAlways = 3;
	OrderingType_PromptAlways = 4;
}

enum ParameterType {
	ParameterType_None = 0;
	ParameterType_NonLocalizedString = 1;
	ParameterType_Number = 2;
	ParameterType_Reference = 3;
	ParameterType_PromptId = 5;
}

message PayCostsReq {
	repeated ManaRequirement manaCost = 1;
	ActionsAvailableReq paymentActions = 2;
	SelectNReq paymentSelection = 3;
	EffectCostReq effectCostReq = 4;
	AutoTapActionsAvailableReq autoTapActionsReq = 6;
}

message PerformActionResp {
	repeated Action actions = 1;
	AutoPassPriority autoPassPriority = 2;
	SettingStatus setYield = 3;
	SettingScope appliesTo = 4;
	SettingKey mapTo = 5;
}

message PerformAutoTapActionsResp {
	uint32 index = 1;
}

enum Phase {
	Phase_None = 0;
	Phase_Beginning = 1;
	Phase_Main1 = 2;
	Phase_Combat = 3;
	Phase_Main2 = 4;
	Phase_Ending = 5;
}

message PlayerConfig {
	uint32 systemSeatId = 1;
	repeated uint32 deckCards = 2;
	repeated uint32 sideboardCards = 3;
	uint32 startingLifeTotal = 6;
	bool startingHandSizeSpecified = 7;
	uint32 startingHandSize = 8;
	repeated uint32 commandEmblems = 9;
	repeated uint32 jazzMusicians = 10;
	repeated CardSkinTuple skins = 11;
	ShuffleRestriction shuffleRestriction = 12;
	uint32 playerConfigFieldThirteen = 13;
}

message PlayerDieRoll {
	uint32 systemSeatId = 1;
	uint32 rollValue = 2;
}

message PlayerInfo {
	int32 lifeTotal = 1;
	uint32 systemSeatNumber = 2;
	repeated ManaInfo manaPool = 6;
	uint32 maxHandSize = 7;
	uint32 mulliganCount = 8;
	uint32 turnNumber = 9;
	uint32 teamId = 10;
	repeated uint32 timerIds = 11;
	uint32 controllerSeatId = 12;
	ControllerType controllerType = 13;
	uint32 timeoutCount = 14;
	uint32 pipCount = 15;
	ClientMessageType pendingMessageType = 16;
	uint32 startingLifeTotal = 17;
}

message PlayerMetricKeyValuePair {
	string key = 1;
	int32 value = 2;
}

message PlayerMetrics {
	uint32 playerId = 1;
	repeated KeyValuePairInfo metrics = 2;
}

message Prompt {
	uint32 promptId = 1;
	repeated PromptParameter parameters = 2;
}

message PromptParameter {
	enum ValueOneofCase {
		None = 0;
		Reference = 3;
		StringValue = 4;
		NumberValue = 5;
		PromptId = 7;
	}

	string parameterName = 1;
	ParameterType type = 2;
	Reference reference = 3;
	string stringValue = 4;
	int32 numberValue = 5;
	int32 promptId = 7;
}

enum ProtoVersion {
	ProtoVersion_None = 0;
	ProtoVersion_HiFiGameStates = 1;
	ProtoVersion_PreviousGameStateId = 2;
	ProtoVersion_Timers = 3;
	ProtoVersion_ManaRequirement = 4;
	ProtoVersion_AutoTapActions = 5;
	ProtoVersion_UIMessages = 6;
	ProtoVersion_AutoTapStopsSetting = 7;
	ProtoVersion_Sideboarding = 8;
	ProtoVersion_AutoOptionalPaymentCancellationSetting = 9;
	ProtoVersion_CostCategory = 10;
	ProtoVersion_TimersV2 = 11;
	ProtoVersion_Control = 12;
	ProtoVersion_TimersV3 = 13;
	ProtoVersion_AutoAcceptHand = 14;
	ProtoVersion_TimersV4 = 15;
	ProtoVersion_TimersV5 = 16;
	ProtoVersion_ManaPaymentStrategyType = 17;
	ProtoVersion_TimersV6 = 18;
	ProtoVersion_TimersV7 = 19;
	ProtoVersion_TimersV8 = 20;
	ProtoVersion_TransientStops = 21;
	ProtoVersion_Cosmetics = 22;
	ProtoVersion_ResultSpec = 23;
	ProtoVersion_ResultReason = 24;
	ProtoVersion_SuperFormat = 25;
	ProtoVersion_AutoSelectReplacementSetting = 26;
	ProtoVersion_MulliganType = 27;
	ProtoVersion_PendingMessageType = 28;
	ProtoVersion_AutoDeclareAttackersThatMustAttackSetting = 29;
	ProtoVersion_DeceptiveActions = 30;
	ProtoVersion_PerformAutoTapActions = 31;
	ProtoVersion_MulliganReq = 32;
	ProtoVersion_AutoTapSolution = 33;
	ProtoVersion_ManaPaymentDeprecated = 34;
	ProtoVersion_SelectFromGroupRespGroups = 35;
	ProtoVersion_PersistentAnnotations = 36;
}

message Reference {
	ReferenceType type = 1;
	uint32 id = 2;
}

enum ReferenceType {
	ReferenceType_None = 0;
	ReferenceType_InstanceId = 1;
	ReferenceType_CatalogId = 2;
	ReferenceType_LocalizationId = 3;
	ReferenceType_PlayerSeatId = 4;
}

message RepeatedValue {
	enum ValuesOneofCase {
		None = 0;
		Uint32Values = 1;
		Int32Values = 2;
		Uint64Values = 3;
		Int64Values = 4;
		BoolValues = 5;
		StringValues = 6;
		FloatValues = 7;
		DoubleValues = 8;
	}

	UInt32Values uint32Values = 1;
	Int32Values int32Values = 2;
	UInt64Values uint64Values = 3;
	Int64Values int64Values = 4;
	BoolValues boolValues = 5;
	StringValues stringValues = 6;
	FloatValues floatValues = 7;
	DoubleValues doubleValues = 8;
}

message ReplacementEffect {
	uint32 objectInstance = 1;
	uint32 uniqueAbilityId = 2;
	uint32 abilityGrpId = 4;
	uint32 affectedObject = 5;
	uint32 replacementEffectId = 6;
	uint32 conferringObjectZcid = 7;
}

message ReportResultMessage {
	ResultSpec result = 1;
}

enum ResultCode {
	ResultCode_None = 0;
	ResultCode_Success = 1;
	ResultCode_Failure = 2;
	ResultCode_CannotAttack = 3;
	ResultCode_AttackCostUnpaid = 4;
	ResultCode_CannotBlock = 5;
	ResultCode_IllegalBlock = 6;
	ResultCode_OrderMismatch = 7;
	ResultCode_MissingDamageSource = 8;
	ResultCode_InvalidDamageSource = 9;
	ResultCode_NonlethalAssignment = 10;
	ResultCode_InvalidAssignment = 11;
	ResultCode_TooManyTargets = 12;
	ResultCode_NotEnoughTargets = 13;
	ResultCode_IllegalTarget = 14;
	ResultCode_RestrictionViolated = 15;
	ResultCode_RequirementViolated = 16;
}

enum ResultReason {
	ResultReason_None = 0;
	ResultReason_Game = 1;
	ResultReason_Concede = 2;
	ResultReason_Timeout = 3;
	ResultReason_Loop = 4;
	ResultReason_Force = 5;
}

message ResultSpec {
	MatchScope scope = 1;
	ResultType result = 2;
	uint32 winningTeamId = 3;
	ResultReason reason = 4;
}

enum ResultType {
	ResultType_None = 0;
	ResultType_Suspended = 1;
	ResultType_Draw = 2;
	ResultType_WinLoss = 3;
}

message SearchFromGroupsReq {
	uint32 minFind = 2;
	uint32 maxFind = 3;
	repeated uint32 zonesToSearch = 4;
	repeated Group groups = 5;
	GroupingStyle groupingStyle = 6;
	uint32 sourceId = 7;
	AllowFailToFind allowFailToFind = 8;
}

message SearchFromGroupsResp {
	repeated Group groups = 3;
}

message SearchReq {
	uint32 minFind = 2;
	uint32 maxFind = 3;
	repeated uint32 zonesToSearch = 4;
	repeated uint32 itemsToSearch = 5;
	repeated uint32 itemsSought = 6;
	uint32 sourceId = 7;
	repeated uint32 additionalZones = 8;
	AllowFailToFind allowFailToFind = 9;
}

message SearchResp {
	repeated uint32 itemsFound = 2;
	uint32 addZoneToSearchScope = 3;
}

enum SelectAction {
	SelectAction_None = 0;
	SelectAction_Select = 1;
	SelectAction_Unselect = 2;
}

message SelectCountersReq {
	uint32 minSel = 1;
	uint32 maxSel = 2;
	SelectionContext context = 3;
	OptionContext optionContext = 5;
	SelectionListType listType = 6;
	repeated CounterPair counterPairs = 7;
	uint32 sourceId = 9;
}

message SelectCountersResp {
	repeated CounterPair selections = 5;
}

message SelectFromGroupsReq {
	repeated Group groups = 3;
	uint32 minTotalSel = 5;
	uint32 maxTotalSel = 6;
	GroupingStyle groupingStyle = 7;
	repeated uint32 unfilteredIds = 8;
	uint32 sourceId = 9;
	repeated uint32 zoneIds = 10;
}

message SelectFromGroupsResp {
	repeated Group groups = 3;
}

message SelectManaTypeReq {
	repeated ManaColor manaColors = 2;
	uint32 sourceId = 3;
}

message SelectManaTypeResp {
	ManaColor manaColor = 3;
}

message SelectNGroupReq {
	uint32 minSel = 1;
	uint32 maxSel = 2;
	repeated Group groups = 3;
	uint32 sourceId = 5;
}

message SelectNGroupResp {
	repeated uint32 selectedgroupids = 2;
}

message SelectNReq {
	int32 minSel = 1;
	uint32 maxSel = 2;
	SelectionContext context = 3;
	OptionContext optionContext = 5;
	SelectionListType listType = 6;
	repeated uint32 ids = 7;
	repeated int32 weights = 8;
	StaticList staticList = 9;
	Prompt prompt = 11;
	IdType idType = 12;
	bool choicesAreRepeatable = 13;
	repeated uint32 unfilteredIds = 14;
	uint32 sourceId = 15;
	repeated uint32 hotIds = 16;
	SelectionValidationType validationType = 17;
	repeated uint32 zoneIds = 18;
}

message SelectNResp {
	repeated uint32 ids = 5;
	OrderingType useArbitrary = 6;
}

message SelectReplacementReq {
	repeated ReplacementEffect replacements = 1;
	bool isOptional = 2;
}

message SelectReplacementResp {
	ReplacementEffect replacement = 1;
}

message SelectTargetsReq {
	repeated TargetSelection targets = 1;
	uint32 sourceId = 2;
	uint32 abilityGrpId = 3;
}

message SelectTargetsResp {
	TargetSelection target = 1;
}

enum SelectionContext {
	SelectionContext_None = 0;
	SelectionContext_Discard = 1;
	SelectionContext_ManaPool = 2;
	SelectionContext_Resolution = 3;
	SelectionContext_TriggeredAbility = 4;
	SelectionContext_Modal = 5;
	SelectionContext_Replacement = 6;
	SelectionContext_NonMana_Payment = 7;
	SelectionContext_ManaFromAbility = 8;
}

enum SelectionListType {
	SelectionListType_None = 0;
	SelectionListType_Static = 1;
	SelectionListType_Dynamic = 2;
	SelectionListType_StaticSubset = 3;
}

enum SelectionValidationType {
	SelectionValidationType_None = 0;
	SelectionValidationType_NonRepeatable = 1;
	SelectionValidationType_ArbitraryRepeats = 2;
	SelectionValidationType_ConstrainedRepeats = 3;
}

message ServerToGREMessage {
	oneof message {
		GRECreateRequest createRequest = 1;
		GREConfigRequest configRequest = 2;
		GREStartMatchRequest startMatchRequest = 3;
		GREResumeMatchRequest resumeMatchRequest = 4;
		GRECheckpointRequest checkpointRequest = 5;
		GREForceResultRequest forceResultRequest = 6;
		GREDestroyRequest destroyRequest = 7;
		GRETimerExpiredMessage timerExpired = 8;
		GRETickMessage tick = 9;
		GRETimeoutMessage timeout = 10;
		GREInterpretRequest interpretRequest = 11;
		GREExpireTimerRequest expireTimerRequest = 12;
		GREElapseTimeRequest elapseTimeRequest = 13;
		GREStartDelayedTimerMessage startDelayedTimerMessage = 14;
	}
}

message ServiceFabricConfigPackageInfo {
	string packageName = 1;
	string packageVersion = 2;
}

message ServiceFabricServiceInfo {
	string serviceName = 1;
	string serviceTypeName = 2;
	int64 replicaOrInstanceId = 3;
	string partitionId = 4;
	string nodeName = 5;
	string codePackageVersion = 6;
	repeated ServiceFabricConfigPackageInfo configPackages = 7;
	string exeAssemblyVersion = 10;
	string gatewayUrl = 20;
}

message ServiceInfoRequest {
}

message SetSettingsReq {
	SettingsMessage settings = 1;
	uint32 turnNumber = 2;
}

message SetSettingsResp {
	SettingsMessage settings = 1;
}

enum Setting {
	Setting_None = 0;
	Setting_Enable = 1;
	Setting_Disable = 2;
}

enum SettingKey {
	SettingKey_None = 0;
	SettingKey_ByAbility = 1;
	SettingKey_ByCardTitle = 2;
}

enum SettingScope {
	SettingScope_None = 0;
	SettingScope_AnyPlayer = 1;
	SettingScope_Opponents = 2;
	SettingScope_Team = 3;
}

enum SettingStatus {
	SettingStatus_None = 0;
	SettingStatus_Set = 1;
	SettingStatus_Clear = 2;
}

message SettingsConfig {
	uint32 seatId = 1;
	SettingsMessage defaultSettings = 2;
	string settingsFilePath = 3;
}

message SettingsMessage {
	repeated Stop stops = 1;
	repeated AutoYield yields = 2;
	repeated AutoAnswer answers = 3;
	AutoPassOption autoPassOption = 4;
	OrderingType graveyardOrder = 5;
	SettingStatus clearAllStops = 6;
	SettingStatus clearAllYields = 7;
	SettingStatus clearAllAnswers = 8;
	ManaSelectionType manaSelectionType = 9;
	AutoPassOption defaultAutoPassOption = 10;
	SmartStopsSetting smartStopsSetting = 11;
	AutoTapStopsSetting autoTapStopsSetting = 12;
	Setting autoOptionalPaymentCancellationSetting = 13;
	ManaPaymentStrategyType manaPaymentStrategyType = 14;
	repeated Stop transientStops = 15;
	repeated CosmeticInfo cosmetics = 16;
	Setting autoSelectReplacementSetting = 17;
	AutoPassOption stackAutoPassOption = 19;
}

enum ShuffleRestriction {
	ShuffleRestriction_None = 0;
	ShuffleRestriction_OpeningHand = 1;
	ShuffleRestriction_All = 2;
}

message SingleValue {
	enum ValueOneofCase {
		None = 0;
		Uint32Value = 1;
		Int32Value = 2;
		Uint64Value = 3;
		Int64Value = 4;
		BoolValue = 5;
		StringValue = 6;
		FloatValue = 7;
		DoubleValue = 8;
	}

	uint32 uint32Value = 1;
	int32 int32Value = 2;
	uint64 uint64Value = 3;
	int64 int64Value = 4;
	bool boolValue = 5;
	string stringValue = 6;
	float floatValue = 7;
	double doubleValue = 8;
}

enum SmartStopsSetting {
	SmartStopsSetting_None = 0;
	SmartStopsSetting_Enable = 1;
	SmartStopsSetting_Disable = 2;
}

message SortFilterPagingOptions {
	string sort = 1;
	string filter = 2;
	int32 top = 5;
	int32 skip = 6;
	ContinuationToken continuationToken = 10;
}

enum StaticList {
	StaticList_None = 0;
	StaticList_CardColors = 1;
	StaticList_ManaColors = 2;
	StaticList_SuperTypes = 3;
	StaticList_CardTypes = 4;
	StaticList_SubTypes = 5;
	StaticList_Colors = 6;
	StaticList_CoinFaces = 7;
	StaticList_WishCards = 8;
	StaticList_BasicLandTypes = 9;
	StaticList_CreatureTypes = 10;
	StaticList_CounterTypes = 11;
	StaticList_Keywords = 12;
	StaticList_CardNames = 13;
	StaticList_Parities = 14;
	StaticList_TypeKinds = 15;
}

enum Step {
	Step_None = 0;
	Step_Untap = 1;
	Step_Upkeep = 2;
	Step_Draw = 3;
	Step_BeginCombat = 4;
	Step_DeclareAttack = 5;
	Step_DeclareBlock = 6;
	Step_CombatDamage = 7;
	Step_EndCombat = 8;
	Step_End = 9;
	Step_Cleanup = 10;
	Step_FirstStrikeDamage = 11;
}

message Stop {
	StopType stopType = 1;
	SettingScope appliesTo = 2;
	SettingStatus status = 3;
}

enum StopType {
	StopType_None = 0;
	StopType_UpkeepStep = 1;
	StopType_DrawStep = 2;
	StopType_PrecombatMainPhase = 3;
	StopType_BeginCombatStep = 4;
	StopType_DeclareAttackersStep = 5;
	StopType_DeclareBlockersStep = 6;
	StopType_CombatDamageStep = 7;
	StopType_EndCombatStep = 8;
	StopType_PostcombatMainPhase = 9;
	StopType_EndStep = 10;
	StopType_FirstStrikeDamageStep = 11;
}

message StringInputReq {
	uint32 sourceId = 2;
}

message StringInputResp {
	string inputValue = 1;
}

message StringValue {
	string value = 1;
}

message StringValues {
	repeated string values = 1;
}

enum SubType {
	SubType_None = 0;
	SubType_Angel = 1;
	SubType_Archer = 2;
	SubType_Archon = 3;
	SubType_Artificer = 4;
	SubType_Assassin = 5;
	SubType_Aura = 6;
	SubType_Basilisk = 7;
	SubType_Bat = 8;
	SubType_Bear = 9;
	SubType_Beast = 10;
	SubType_Berserker = 11;
	SubType_Bird = 12;
	SubType_Boar = 13;
	SubType_Cat = 14;
	SubType_Chandra = 15;
	SubType_Cleric = 16;
	SubType_Construct = 17;
	SubType_Crocodile = 18;
	SubType_Demon = 19;
	SubType_Djinn = 20;
	SubType_Dragon = 21;
	SubType_Drake = 22;
	SubType_Druid = 23;
	SubType_Fish = 24;
	SubType_Elemental = 25;
	SubType_Elephant = 26;
	SubType_Elf = 27;
	SubType_Equipment = 28;
	SubType_Forest = 29;
	SubType_Garruk = 30;
	SubType_Gate = 31;
	SubType_Giant = 32;
	SubType_Gideon = 33;
	SubType_Goblin = 34;
	SubType_Golem = 35;
	SubType_Griffin = 36;
	SubType_Horse = 37;
	SubType_Human = 39;
	SubType_Hydra = 40;
	SubType_Illusion = 41;
	SubType_Insect = 42;
	SubType_Island = 43;
	SubType_Jace = 44;
	SubType_Knight = 45;
	SubType_Merfolk = 46;
	SubType_Minotaur = 47;
	SubType_Monk = 48;
	SubType_Mountain = 49;
	SubType_Ogre = 50;
	SubType_Ooze = 51;
	SubType_Pegasus = 52;
	SubType_Phoenix = 53;
	SubType_Plains = 54;
	SubType_Rhino = 55;
	SubType_Rogue = 56;
	SubType_Salamander = 57;
	SubType_Scout = 58;
	SubType_Serpent = 59;
	SubType_Shade = 60;
	SubType_Shaman = 61;
	SubType_Siren = 62;
	SubType_Skeleton = 63;
	SubType_Soldier = 64;
	SubType_Sorin = 65;
	SubType_Sphinx = 66;
	SubType_Spider = 67;
	SubType_Spirit = 68;
	SubType_Swamp = 69;
	SubType_Tower = 70;
	SubType_Treefolk = 71;
	SubType_Troll = 72;
	SubType_Urzas = 73;
	SubType_Vampire = 74;
	SubType_Vedalken = 75;
	SubType_Wall = 76;
	SubType_Warrior = 77;
	SubType_Wizard = 78;
	SubType_Wolf = 79;
	SubType_Wurm = 80;
	SubType_Zombie = 81;
	SubType_Mine = 82;
	SubType_Power_Plant = 83;
	SubType_Saproling = 84;
	SubType_Avatar = 85;
	SubType_Sliver = 86;
	SubType_Samurai = 87;
	SubType_Pest = 88;
	SubType_Thalakos = 89;
	SubType_Dauthi = 90;
	SubType_Minion = 91;
	SubType_Advisor = 92;
	SubType_Ajani = 93;
	SubType_Alara = 94;
	SubType_Ally = 95;
	SubType_Antelope = 97;
	SubType_Ape = 98;
	SubType_Arcane = 99;
	SubType_Arkhos = 100;
	SubType_Ashiok = 101;
	SubType_AssemblyWorker = 102;
	SubType_Atog = 103;
	SubType_Aurochs = 104;
	SubType_Azgol = 105;
	SubType_Badger = 106;
	SubType_Barbarian = 107;
	SubType_Beeble = 108;
	SubType_Belenon = 109;
	SubType_Bolas = 110;
	SubType_Bolass = 111;
	SubType_Bringer = 112;
	SubType_Brushwagg = 113;
	SubType_Camel = 114;
	SubType_Carrier = 115;
	SubType_Centaur = 116;
	SubType_Cephalid = 117;
	SubType_Chimera = 118;
	SubType_Cockatrice = 119;
	SubType_Crab = 120;
	SubType_Curse = 121;
	SubType_Cyclops = 122;
	SubType_Desert = 123;
	SubType_Devil = 124;
	SubType_Dominaria = 125;
	SubType_Domri = 126;
	SubType_Dreadnought = 127;
	SubType_Drone = 128;
	SubType_Dryad = 129;
	SubType_Dwarf = 130;
	SubType_Efreet = 131;
	SubType_Elder = 132;
	SubType_Eldrazi = 133;
	SubType_Elk = 134;
	SubType_Elspeth = 135;
	SubType_Equilor = 136;
	SubType_Ergamon = 137;
	SubType_Eye = 138;
	SubType_Fabacin = 139;
	SubType_Faerie = 140;
	SubType_Ferret = 141;
	SubType_Flagbearer = 142;
	SubType_Fortification = 143;
	SubType_Fox = 144;
	SubType_Frog = 145;
	SubType_Fungus = 146;
	SubType_Gargoyle = 147;
	SubType_Gnome = 148;
	SubType_Goat = 149;
	SubType_God = 150;
	SubType_Gorgon = 151;
	SubType_Gremlin = 152;
	SubType_Hag = 153;
	SubType_Harpy = 154;
	SubType_Hellion = 155;
	SubType_Hippo = 156;
	SubType_Hippogriff = 157;
	SubType_Homarid = 158;
	SubType_Homunculus = 159;
	SubType_Horror = 160;
	SubType_Hyena = 161;
	SubType_Imp = 162;
	SubType_Incarnation = 163;
	SubType_Innistrad = 164;
	SubType_Iquatana = 165;
	SubType_Ir = 166;
	SubType_Jellyfish = 167;
	SubType_Juggernaut = 168;
	SubType_Kaldheim = 169;
	SubType_Kamigawa = 170;
	SubType_Karn = 171;
	SubType_Karsus = 172;
	SubType_Kavu = 173;
	SubType_Kephalai = 174;
	SubType_Kirin = 175;
	SubType_Kithkin = 176;
	SubType_Kobold = 177;
	SubType_Kolbahan = 178;
	SubType_Kor = 179;
	SubType_Koth = 180;
	SubType_Kraken = 181;
	SubType_Kyneth = 182;
	SubType_Lair = 183;
	SubType_Lammasu = 184;
	SubType_Leech = 185;
	SubType_Leviathan = 186;
	SubType_Lhurgoyf = 187;
	SubType_Licid = 188;
	SubType_Liliana = 189;
	SubType_Lizard = 190;
	SubType_Locus = 191;
	SubType_Lorwyn = 192;
	SubType_Luvion = 193;
	SubType_Manticore = 194;
	SubType_Masticore = 195;
	SubType_Meditation = 196;
	SubType_Mercadia = 197;
	SubType_Mercenary = 198;
	SubType_Metathran = 199;
	SubType_Mirrodin = 200;
	SubType_Moag = 201;
	SubType_Monger = 202;
	SubType_Mongoose = 203;
	SubType_Mongseng = 204;
	SubType_Moonfolk = 205;
	SubType_Muraganda = 206;
	SubType_Mutant = 207;
	SubType_Myr = 208;
	SubType_Mystic = 209;
	SubType_Nautilus = 210;
	SubType_Nephilim = 211;
	SubType_New = 212;
	SubType_Nightmare = 213;
	SubType_Nightstalker = 214;
	SubType_Ninja = 215;
	SubType_Nissa = 216;
	SubType_Noggle = 217;
	SubType_Nomad = 218;
	SubType_Nymph = 219;
	SubType_Octopus = 220;
	SubType_Orc = 221;
	SubType_Orgg = 222;
	SubType_Ouphe = 223;
	SubType_Ox = 224;
	SubType_Oyster = 225;
	SubType_Phelddagrif = 226;
	SubType_Phyrexia = 227;
	SubType_Pirate = 228;
	SubType_Plant = 229;
	SubType_Praetor = 230;
	SubType_Pyrulea = 231;
	SubType_Rabbit = 232;
	SubType_Rabiah = 233;
	SubType_Ral = 234;
	SubType_Rat = 235;
	SubType_Rath = 236;
	SubType_Ravnica = 237;
	SubType_Realm = 238;
	SubType_Rebel = 239;
	SubType_Regatha = 240;
	SubType_Rigger = 241;
	SubType_Sable = 242;
	SubType_Sarkhan = 243;
	SubType_Satyr = 244;
	SubType_Scarecrow = 245;
	SubType_Scorpion = 246;
	SubType_Segovia = 247;
	SubType_Serras = 248;
	SubType_Shadowmoor = 249;
	SubType_Shandalar = 250;
	SubType_Shapeshifter = 251;
	SubType_Sheep = 252;
	SubType_Shrine = 253;
	SubType_Slith = 254;
	SubType_Slug = 255;
	SubType_Snake = 256;
	SubType_Soltari = 257;
	SubType_Spawn = 258;
	SubType_Specter = 259;
	SubType_Spellshaper = 260;
	SubType_Spike = 261;
	SubType_Sponge = 262;
	SubType_Squid = 263;
	SubType_Squirrel = 264;
	SubType_Starfish = 265;
	SubType_Surrakar = 266;
	SubType_Tamiyo = 267;
	SubType_Tezzeret = 268;
	SubType_Thopter = 269;
	SubType_Thrull = 270;
	SubType_Tibalt = 271;
	SubType_Trap = 272;
	SubType_Turtle = 273;
	SubType_Ulgrotha = 274;
	SubType_Unicorn = 275;
	SubType_Valla = 276;
	SubType_Venser = 277;
	SubType_Viashino = 278;
	SubType_Volver = 279;
	SubType_Vraska = 280;
	SubType_Vryn = 281;
	SubType_Weird = 282;
	SubType_Werewolf = 283;
	SubType_Whale = 284;
	SubType_Wildfire = 285;
	SubType_Wolverine = 286;
	SubType_Wombat = 287;
	SubType_Worm = 288;
	SubType_Wraith = 289;
	SubType_Xenagos = 290;
	SubType_Xerex = 291;
	SubType_Yeti = 292;
	SubType_Zendikar = 293;
	SubType_Zubera = 294;
	SubType_Germ = 295;
	SubType_Contraption = 296;
	SubType_Citizen = 297;
	SubType_Coward = 298;
	SubType_Deserter = 299;
	SubType_Prism = 300;
	SubType_Reflection = 301;
	SubType_Sand = 302;
	SubType_Serf = 303;
	SubType_Dack = 304;
	SubType_Kiora = 305;
	SubType_AllCreatureTypes = 306;
	SubType_Blinkmoth = 307;
	SubType_Camarid = 308;
	SubType_Caribou = 309;
	SubType_Graveborn = 310;
	SubType_Lamia = 311;
	SubType_Orb = 312;
	SubType_Pentavite = 313;
	SubType_Pincher = 314;
	SubType_Splinter = 315;
	SubType_Survivor = 316;
	SubType_Tetravite = 317;
	SubType_Triskelavite = 318;
	SubType_Scion = 319;
	SubType_Processor = 320;
	SubType_Arlinn = 321;
	SubType_Mole = 322;
	SubType_Nahiri = 323;
	SubType_Clue = 324;
	SubType_Teferi = 325;
	SubType_Daretti = 326;
	SubType_Freyalise = 327;
	SubType_Nixilis = 328;
	SubType_Narset = 329;
	SubType_Ugin = 330;
	SubType_Vehicle = 331;
	SubType_Servo = 332;
	SubType_Dovin = 333;
	SubType_Saheeli = 334;
	SubType_Monkey = 335;
	SubType_Aetherborn = 336;
	SubType_Pilot = 337;
	SubType_Jackal = 338;
	SubType_Naga = 339;
	SubType_Cartouche = 340;
	SubType_Samut = 341;
	SubType_Dinosaur = 342;
	SubType_Treasure = 343;
	SubType_Huatli = 344;
	SubType_Angrath = 345;
	SubType_Trilobite = 346;
	SubType_Saga = 347;
	SubType_Jaya = 348;
	SubType_Vivien = 349;
	SubType_Egg = 350;
	SubType_Kaya = 351;
	SubType_Aminatou = 352;
	SubType_Estrid = 353;
	SubType_Rowan = 354;
	SubType_Will = 355;
	SubType_Windgrace = 356;
	SubType_Yanggu = 357;
	SubType_Yanling = 358;
	SubType_Army = 359;
	SubType_Teyo = 360;
	SubType_Kasmina = 361;
	SubType_Davriel = 362;
	SubType_Food = 363;
	SubType_Mouse = 364;
	SubType_Noble = 365;
	SubType_Peasant = 366;
	SubType_Oko = 367;
	SubType_Warlock = 368;
	SubType_Adventure = 369;
	SubType_Demigod = 370;
	SubType_Gold = 371;
	SubType_Tentacle = 372;
	SubType_Azra = 373;
	SubType_Pangolin = 374;
	SubType_Calix = 375;
	SubType_Lukka = 376;
	SubType_Otter = 377;
	SubType_Shark = 378;
	SubType_Dog = 379;
	SubType_Basri = 380;
	SubType_Rune = 381;
	SubType_Tyvar = 382;
	SubType_Phyrexian = 383;
	SubType_Niko = 384;
	SubType_Shard = 385;
	SubType_Inkling = 386;
	SubType_Fractal = 387;
	SubType_Lesson = 388;
	SubType_Bard = 389;
	SubType_Beholder = 390;
	SubType_Gnoll = 391;
	SubType_Hamster = 392;
	SubType_Halfling = 393;
	SubType_Tiefling = 394;
	SubType_Bahamut = 395;
	SubType_Ellywick = 396;
	SubType_Lolth = 397;
	SubType_Mordenkainen = 398;
	SubType_Zariel = 399;
	SubType_Class = 400;
	SubType_Ranger = 401;
	SubType_Wrenn = 402;
	SubType_Blood = 403;
	SubType_Serra = 404;
	SubType_Kaito = 405;
	SubType_Raccoon = 406;
	SubType_Gith = 407;
	SubType_Minsc = 408;
	SubType_Tasha = 409;
	SubType_Walrus = 410;
	SubType_Powerstone = 411;
	SubType_Urza = 412;
	SubType_Mite = 413;
	SubType_Sphere = 414;
	SubType_Incubator = 415;
	SubType_Siege = 416;
	SubType_PlaceholderSubType417 = 417;
	SubType_PlaceholderSubType418 = 418;
	SubType_PlaceholderSubType419 = 419;
	SubType_PlaceholderSubType420 = 420;
	SubType_PlaceholderSubType421 = 421;
	SubType_PlaceholderSubType422 = 422;
	SubType_PlaceholderSubType423 = 423;
}

enum SubZoneType {
	SubZoneType_None = 0;
	SubZoneType_Top = 1;
	SubZoneType_Bottom = 2;
}

message SubmitAttackersResp {
	ResultCode result = 1;
}

message SubmitBlockersResp {
	ResultCode result = 1;
}

message SubmitDeckReq {
	DeckMessage deck = 1;
}

message SubmitDeckResp {
	DeckMessage deck = 1;
}

message SubmitTargetsResp {
	ResultCode result = 1;
}

enum SuperFormat {
	SuperFormat_None = 0;
	SuperFormat_Limited = 1;
	SuperFormat_Constructed = 2;
}

enum SuperType {
	SuperType_None = 0;
	SuperType_Basic = 1;
	SuperType_Legendary = 2;
	SuperType_Ongoing = 3;
	SuperType_Snow = 4;
	SuperType_World = 5;
}

message Target {
	uint32 targetInstanceId = 1;
	SelectAction legalAction = 2;
	HighlightType highlight = 3;
}

message TargetInfo {
	TargetType targetType = 1;
	uint32 targetId = 2;
}

message TargetSelection {
	uint32 targetIdx = 1;
	repeated Target targets = 2;
	uint32 minTargets = 3;
	uint32 maxTargets = 4;
	uint32 selectedTargets = 5;
	Prompt prompt = 6;
	uint32 targetSourceZoneId = 7;
	uint32 targetingAbilityGrpId = 8;
}

enum TargetType {
	TargetType_None = 0;
	TargetType_Player = 1;
	TargetType_GameObject = 2;
}

message TeamConfig {
	uint32 teamID = 1;
	repeated PlayerConfig players = 2;
}

message TeamInfo {
	uint32 id = 1;
	repeated uint32 playerIds = 2;
}

enum TeamType {
	TeamType_None = 0;
	TeamType_Individual = 1;
	TeamType_SharedTeam = 2;
}

message TestConfig {
	ShuffleRestriction shuffleRestriction = 1;
	uint32 startingPlayer = 2;
	bool useSpecifiedSeed = 3;
	uint32 randomSeed = 4;
	bool useZeroManaCostForCasting = 5;
	uint32 useMaxLandsPerTurn = 6;
	TreeOfCongress treeOfCongress = 7;
	bool disableGameStateQueueingDuringCancelableActions = 10;
	bool disableHiFiGameStates = 11;
	bool disableTimers = 12;
	repeated uint32 randomSeeds = 13;
	uint32 freeMulliganCount = 14;
	uint32 randomDrawCount = 15;
	float minRandomDrawDistance = 16;
	float maxRandomDrawDistance = 17;
	bool enableAutoAcceptHand = 18;
	bool enableAutoPlay = 19;
	bool disableUnexpectedMessageRecovery = 20;
	bool disableSideboarding = 21;
	uint32 candidateShuffleCount = 22;
	uint32 bestCandidateShuffleCount = 23;
	AutoRespondPermission autoRespondPermission = 24;
	bool disableDeferredActionCostPayment = 25;
	bool disableIndividualDamageAssignments = 26;
	bool disableHiFiSettings = 27;
	bool enableSideboardLoading = 28;
	bool disableUniqueAbilityActivations = 29;
}

message TimeoutConfig {
	uint32 maxTimeoutCount = 1;
	uint32 startingTimeoutCount = 2;
	uint32 maxPipCount = 3;
	uint32 startingPipCount = 4;
	uint32 durationSec = 5;
}

message TimeoutMessage {
	uint32 seatId = 1;
	uint32 timeoutCount = 2;
	TimerInfo timer = 3;
}

enum TimeoutType {
	TimeoutType_None = 0;
	TimeoutType_ChessClock = 1;
	TimeoutType_Inactivity = 2;
}

enum TimerBehavior {
	TimerBehavior_None = 0;
	TimerBehavior_Timeout = 1;
	TimerBehavior_AutoRespond = 2;
	TimerBehavior_TakeControl = 3;
	TimerBehavior_ReleaseControl = 4;
	TimerBehavior_Start = 5;
	TimerBehavior_Restart = 6;
	TimerBehavior_Stop = 7;
	TimerBehavior_Reset = 8;
	TimerBehavior_Activate = 9;
	TimerBehavior_Deactivate = 10;
	TimerBehavior_StartDelayedTimer = 11;
}

message TimerConfig {
	TimerType type = 1;
	uint32 durationSec = 4;
	TimerBehavior behavior = 5;
	repeated TimerControl controls = 6;
	uint32 warningThresholdSec = 7;
	uint32 maxDurationSec = 8;
}

message TimerControl {
	TimerEvent event = 1;
	TimerBehavior behavior = 2;
}

enum TimerEvent {
	TimerEvent_None = 0;
	TimerEvent_OnRequestSent = 1;
	TimerEvent_OnResponseReceived = 2;
	TimerEvent_OnExpiration = 3;
	TimerEvent_OnMatchStart = 4;
	TimerEvent_OnGameStart = 5;
	TimerEvent_OnPlayStart = 6;
	TimerEvent_OnTurnChanged = 7;
	TimerEvent_OnActivePlayer = 8;
	TimerEvent_OnNonActivePlayer = 9;
	TimerEvent_Beginning = 10;
	TimerEvent_Main1 = 11;
	TimerEvent_Combat = 12;
	TimerEvent_Main2 = 13;
	TimerEvent_Ending = 14;
	TimerEvent_OnWin = 15;
	TimerEvent_OnLoss = 16;
	TimerEvent_OnDraw = 17;
	TimerEvent_OnGameOver = 18;
	TimerEvent_OnMatchOver = 19;
	TimerEvent_OnTurnOver = 20;
	TimerEvent_Upkeep = 21;
	TimerEvent_Draw = 22;
	TimerEvent_BeginCombat = 23;
	TimerEvent_DeclareAttack = 24;
	TimerEvent_DeclareBlock = 25;
	TimerEvent_CombatDamage = 26;
	TimerEvent_EndCombat = 27;
	TimerEvent_End = 28;
	TimerEvent_Cleanup = 29;
	TimerEvent_FirstStrikeDamage = 30;
}

message TimerInfo {
	uint32 timerId = 1;
	TimerType type = 2;
	uint32 durationSec = 3;
	uint32 elapsedSec = 4;
	bool running = 5;
	TimerBehavior behavior = 6;
	uint32 warningThresholdSec = 7;
	uint32 elapsedMs = 8;
}

enum TimerPackage {
	TimerPackage_None = 0;
	TimerPackage_V1 = 1;
	TimerPackage_V2 = 2;
	TimerPackage_V3 = 3;
	TimerPackage_V4 = 4;
	TimerPackage_V5 = 5;
	TimerPackage_DirectChallenge = 6;
	TimerPackage_Default = 7;
	TimerPackage_BestOfThree = 8;
	TimerPackage_BestOfOneMatchClock = 9;
}

message TimerStateMessage {
	uint32 seatId = 1;
	repeated TimerInfo timers = 2;
}

enum TimerType {
	TimerType_None = 0;
	TimerType_Decision = 1;
	TimerType_Inactivity = 2;
	TimerType_ActivePlayer = 3;
	TimerType_NonActivePlayer = 4;
	TimerType_Prologue = 5;
	TimerType_Epilogue = 6;
	TimerType_Delay = 7;
	TimerType_MatchClock = 8;
}

message TreeOfCongress {
	repeated uint32 systemSeatId = 1;
}

message TurnInfo {
	Phase phase = 1;
	Step step = 2;
	uint32 turnNumber = 3;
	uint32 activePlayer = 4;
	uint32 priorityPlayer = 5;
	uint32 decisionPlayer = 6;
	Phase nextPhase = 8;
	Step nextStep = 9;
}

message UIMessage {
	repeated uint32 seatIds = 1;
	oneof message {
		OnSelect onSelect = 2;
		OnHover onHover = 3;
		OnShuffle onShuffle = 4;
		OnChat onChat = 5;
		OnGenericEvent onGenericEvent = 6;
	}
}

message UInt32Value {
	uint32 value = 1;
}

message UInt32Values {
	repeated uint32 values = 1;
}

message UInt64Value {
	uint64 value = 1;
}

message UInt64Values {
	repeated uint64 values = 1;
}

message UserConnectionInfo {
	ConnectionState connectionState = 1;
	int64 lastConnectTimestamp = 10;
	int64 lastDisconnectTimestamp = 11;
}

message UserOption {
	Prompt optionPrompt = 1;
	ClientMessageType responseType = 2;
}

message Version {
	uint32 majorVersion = 1;
	uint32 minorVersion = 2;
	uint32 revisionVersion = 3;
	uint32 buildVersion = 4;
}

enum Visibility {
	Visibility_None = 0;
	Visibility_Public = 1;
	Visibility_Private = 2;
	Visibility_Hidden = 3;
	Visibility_Deceptive = 4;
}

message ZoneInfo {
	uint32 zoneId = 1;
	ZoneType type = 2;
	Visibility visibility = 3;
	uint32 ownerSeatId = 4;
	repeated uint32 objectInstanceIds = 5;
	repeated uint32 viewers = 6;
}

enum ZoneType {
	ZoneType_None = 0;
	ZoneType_Library = 1;
	ZoneType_Hand = 2;
	ZoneType_Battlefield = 3;
	ZoneType_Stack = 4;
	ZoneType_Graveyard = 5;
	ZoneType_Exile = 6;
	ZoneType_Command = 7;
	ZoneType_Revealed = 8;
	ZoneType_Limbo = 9;
	ZoneType_Sideboard = 10;
	ZoneType_Pending = 11;
	ZoneType_PhasedOut = 12;
	ZoneType_Suppressed = 13;
}

